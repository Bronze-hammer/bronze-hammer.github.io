<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐子辉的个人站点</title>
  
  <subtitle>Change Myself From Now ON.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-02-23T07:02:26.130Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xuzh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅析Field-injection-is-not-recommended</title>
    <link href="http://yoursite.com/2023/02/22/%E6%B5%85%E6%9E%90Field-injection-is-not-recommended/"/>
    <id>http://yoursite.com/2023/02/22/浅析Field-injection-is-not-recommended/</id>
    <published>2023-02-22T09:36:46.000Z</published>
    <updated>2023-02-23T07:02:26.130Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA运行SpringBoot项目，遇到以下有关 <span class="citation" data-cites="Autowired">@Autowired</span> 注解的警告：Field injection isnot recommended .这篇文章浅析这个问题，为什么会有这样的提示？为什么字段注入的方式不推荐？</p><a id="more"></a><p>当前的 spring framework (5.0.3) 文档仅定义了两种主要的注入类型<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p><blockquote><p>DI exists in two major variants: Constructor-based dependencyinjection and Setter-based dependency injection.</p></blockquote><p>基于构造函数的依赖注入:在基于构造函数的依赖注入中，类构造函数被注释@Autowired并包含可变数量的参数以及要注入的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the SimpleMovieLister has a dependency on a MovieFinder</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a constructor so that the Spring container can inject a MovieFinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleMovieLister</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// business logic that actually uses the injected MovieFinder is omitted...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于构造函数的注入的主要优点是您可以将注入的字段声明为final，因为它们将在类实例化期间启动。这对于所需的依赖项很方便。</p><p>基于Setter的依赖注入:在基于 setter 的依赖注入中，setter方法用@Autowired. 一旦使用无参数构造函数或无参数静态工厂方法实例化Bean，Spring 容器将调用这些 setter 方法以注入 Bean 的依赖项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the SimpleMovieLister has a dependency on the MovieFinder</span></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a setter method so that the Spring container can inject a MovieFinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// business logic that actually uses the injected MovieFinder is omitted...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际上还有第三种，也是被广泛应用的</p><p>基于字段的依赖注入:在基于字段的依赖注入中，字段/属性用@Autowired.实例化类后，Spring 容器将设置这些字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorBasedInjection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InjectedBean injectedBean;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是注入依赖项的最简洁的方法，因为它避免了添加样板代码，并且无需为类声明构造函数。代码看起来不错，简洁明了，但正如代码检查员已经提示我们的那样，这种方法有一些缺点。</p><p>那么为什么不推荐使用基于字段的依赖注入？</p><h2 id="基于字段的依赖注入缺点2">基于字段的依赖注入缺点<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></h2><h3 id="不允许不可变字段声明">不允许不可变字段声明</h3><p>基于字段的依赖注入不适用于声明为 final/immutable的字段，因为这些字段必须在类实例化时实例化。声明不可变依赖项的唯一方法是使用基于构造函数的依赖项注入。</p><h3 id="违反了单一责任原则">违反了单一责任原则</h3><p>如您所知，在面向对象的计算机编程中，<a href="https://en.wikipedia.org/wiki/SOLID" target="_blank" rel="noopener">SOLID</a><a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>首字母缩略词定义了五个设计原则，这些原则将使您的代码易于理解、灵活和可维护。SOLID中的S代表单一职责原则，这意味着一个类应该只负责软件应用程序功能的单个部分，并且它的所有服务都应该与该职责严格对齐。</p><p>使用基于字段的依赖注入，很容易在你的类中有很多依赖，一切看起来都很好。如果改为使用基于构造函数的依赖注入，随着更多的依赖项被添加到你的类中，构造函数变得越来越大。拥有一个包含十个以上参数的构造函数是一个明显的标志，表明该类有太多协作者，这可能是开始将类拆分为更小且更易于维护的部分的好时机。</p><blockquote><p>这里要说明：基于构造函数依赖注入，并不说能够解决类里面的过多依赖的问题。而是说能够直观的提示我们：这个类被注入了太多的依赖，你该停下来，优化并拆分你的业务逻辑了！</p></blockquote><p>因此，尽管字段注入并不直接导致打破单一责任原则，但它肯定有助于隐藏信号，否则这些信号会非常明显。</p><h3 id="与依赖注入容器紧密耦合">与依赖注入容器紧密耦合</h3><p>使用基于字段的注入的主要原因是避免getter和setter的样板代码或为您的类创建构造函数。最后，这意味着可以设置这些字段的唯一方法是通过Spring容器实例化类并使用反射注入它们，否则字段将保持为null 并且您的类将被破坏/无用。</p><p>依赖注入设计模式将类依赖的创建与类本身分开，将此责任转移到类注入器，允许程序设计松散耦合并遵循单一职责和依赖倒置原则（再次是SOLID）。因此，最终通过自动装配其字段实现的类解耦会因再次与类注入器（在本例中为Spring）耦合而丢失，从而使该类在 Spring 容器之外无用。</p><p>这意味着如果你想在应用程序容器之外使用你的类，例如用于单元测试，你必须使用Spring容器来实例化你的类，因为没有其他可能的方法（除了反射）来设置自动装配的字段。</p><h3 id="隐藏的依赖">隐藏的依赖</h3><p>使用依赖注入模式时，受影响的类应该使用公共接口清楚地公开这些依赖关系，方法是在构造函数中公开所需的依赖关系，或者使用方法（setter）公开可选的依赖关系。当使用基于字段的依赖注入时，该类本质上将这些依赖隐藏到外部世界。</p><h3 id="结论">结论</h3><p>我们已经看到应该尽可能避免基于字段的注入，因为它有许多缺点，无论它看起来多么优雅。推荐的方法是使用基于构造函数和基于设置器的依赖注入。对于必需的依赖项，建议使用基于构造函数的注入，以允许它们不可变并防止它们为空。对于可选的依赖项，建议使用基于Setter 的注入。</p><section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes"><hr><ol><li id="fn1"><p>《Spring Framework Documentation 1.4.1. DependencyInjection》 <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2"><p>《Field injection is not recommended – Spring IOC》 <a href="https://blog.marcnuri.com/field-injection-is-not-recommended#eases-single-responsibility-principle-violation" target="_blank" rel="noopener">https://blog.marcnuri.com/field-injection-is-not-recommended#eases-single-responsibility-principle-violation</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3"><p>《Wiki SOLID》 <a href="https://en.wikipedia.org/wiki/SOLID" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/SOLID</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDEA运行SpringBoot项目，遇到以下有关 &lt;span class=&quot;citation&quot; data-cites=&quot;Autowired&quot;&gt;@Autowired&lt;/span&gt; 注解的警告：Field injection is
not recommended .
这篇文章浅析这个问题，为什么会有这样的提示？为什么字段注入的方式不推荐？&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="field injection" scheme="http://yoursite.com/tags/field-injection/"/>
    
  </entry>
  
  <entry>
    <title>日常工作中Java.Stream流操作汇总</title>
    <link href="http://yoursite.com/2023/02/08/%E6%97%A5%E5%B8%B8%E5%B7%A5%E4%BD%9C%E4%B8%ADJava-Stream%E6%B5%81%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2023/02/08/日常工作中Java-Stream流操作汇总/</id>
    <published>2023-02-08T02:29:31.000Z</published>
    <updated>2023-02-22T08:37:49.275Z</updated>
    
    <content type="html"><![CDATA[<p>Java 8API添加了一个新的抽象称为流Stream，以一种声明的方式处理数据。Stream使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java集合运算和表达的高阶抽象。StreamAPI可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。这种风格将要处理的元素集合看作一种流，流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选，排序，聚合等。元素流在管道中经过中间操作（intermediateoperation）的处理，最后由最终操作(terminaloperation)得到前面处理的结果。</p><p>————《菜鸟教程》</p><p>本片文章记录了工作中常用的Stream流操作，方便之后回顾。</p><a id="more"></a><h2 id="对list集合取user中的一个元素形成新的list集合">1.对List<user>集合，取User中的一个元素，形成新的List<string>集合</string></user></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List&lt;User&gt; userList;</span></span><br><span class="line">List&lt;String&gt; userNameList = userList.stream.map(User::getUserName).collect(Collectors.toList);</span><br></pre></td></tr></table></figure><h2 id="去重">2.去重</h2><p>对集合 List<user> userList 内的对象去重（实体类User 使用Lombok插件的@Data 注解，自动覆写 equals 和 hashCode 方法） <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List&lt;User&gt; userList;</span></span><br><span class="line">List&lt;User&gt; newUserList = userList.stream().distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure></user></p><h2 id="过滤">3.过滤</h2><p>过滤集合 List&lt;SysOptionData&gt; optionDataList 对象label为"zhangsan" 的数据 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SysOptionData&gt; resultList = optionDataList.stream().filter(</span><br><span class="line">optionData -&gt; <span class="string">"zhangsan"</span>.equals(optionData.getOptionLabel())</span><br><span class="line">).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回过滤后的集合第一条数据</span></span><br><span class="line">List&lt;SysOptionData&gt; resultList = optionDataList.stream().filter(</span><br><span class="line">optionData -&gt; <span class="string">"zhangsan"</span>.equals(optionData.getOptionLabel())</span><br><span class="line">).findFirst();</span><br></pre></td></tr></table></figure></p><h2 id="list集合转string字符串">4.List集合转String字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List&lt;User&gt; 包含User实体的集合，只提取username拼成一个字符串，以“，”隔开</span></span><br><span class="line">String username = userList.stream().map(User::getUsername()).collect(Collectors.joining(<span class="string">","</span>));  </span><br><span class="line"></span><br><span class="line"><span class="comment">// List&lt;String&gt; usernameList</span></span><br><span class="line">String username = usernameList.stream().collect(Collectors.joining(<span class="string">","</span>));</span><br></pre></td></tr></table></figure><h2 id="匹配两个list集合返回新的list集合">5.匹配两个List集合，返回新的List集合</h2><p>比如有两个集合，List&lt;User&gt;、 List&lt;Address&gt;</p><p>List&lt;User&gt; 集合的数据</p><table><thead><tr class="header"><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr class="odd"><td>zhangsan</td><td>15</td><td>null</td></tr><tr class="even"><td>tom</td><td>16</td><td>null</td></tr><tr class="odd"><td>jom</td><td>20</td><td>null</td></tr></tbody></table><p>List&lt;Address&gt; 集合的数据</p><table><thead><tr class="header"><th>name</th><th>address</th></tr></thead><tbody><tr class="odd"><td>zhangsan</td><td>China</td></tr><tr class="even"><td>tom</td><td>USA</td></tr><tr class="odd"><td>jary</td><td>Japan</td></tr></tbody></table><p>对比着两个集合，以List&lt;User&gt;为主体，按照name字段匹配List&lt;Address&gt;集合，把匹配到的Address对象的address字段的值设置到User对象的address字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; list = userList.stream()</span><br><span class="line">.map(u -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> addrList.stream()</span><br><span class="line">.filter(a -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> a.getName().equals(u.getName());</span><br><span class="line">&#125;).map(a -&gt; &#123;</span><br><span class="line">u.setAddress(a.getAddress());</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br><span class="line">&#125;)</span><br><span class="line">.flatMap(List::stream)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line"><span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">System.out.println(user.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User [name=zhangsan, age=15, address=China]</span><br><span class="line">User [name=tom, age=16, address=USA]</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，结果只会返回匹配到的数据</p></blockquote><h2 id="stream-map和flatmap的区别">6.Stream map和flatMap的区别</h2><h3 id="stream.map">6.1 stream.map</h3><p><em>Returns a stream consisting of the results of applying thegivenfunction to the elements of this stream.</em></p><p>返回一个流，由将给定函数应用于该流的元素的结果组成。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; nameList = Stream.of(<span class="string">"ZhangSan"</span>, <span class="string">"Tom"</span>).collect(Collectors.toList());</span><br><span class="line">nameList.stream().map(n -&gt; n + <span class="string">", welcome"</span>).forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZhangSan, welcome</span><br><span class="line">Tom, welcome</span><br></pre></td></tr></table></figure><p>请注意另一种情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; nameList = Stream.of(<span class="string">"ZhangSan"</span>, <span class="string">"Tom"</span>).collect(Collectors.toList());</span><br><span class="line">List&lt;String[]&gt; list = nameList.stream().map(n -&gt; n.split(<span class="string">""</span>)).collect(Collectors.toList());</span><br><span class="line"><span class="keyword">for</span> (String[] strings : list) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">System.out.print(strings[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z  h  a  n  g  S  a  n  </span><br><span class="line">T  o  m</span><br></pre></td></tr></table></figure><blockquote><p>map操作就是把一种操作运算，映射到一个序列的每一个元素上。以每个元素为一个单位，运算的结果也是相互独立的，所以返回的是List&lt;String[]&gt;，而不是List&lt;String&gt;</p></blockquote><h3 id="stream.flatmap">6.2 stream.flatMap</h3><p><em>Returns a stream consisting of the results of replacing eachelement ofthis stream with the contents of a mapped stream produced byapplyingthe provided mapping function to each element. Each mappedstream is closed after its contentshave been placed into this stream.(If a mapped stream is nullan empty stream is used, instead.)</em></p><p>返回一个流，由将提供的映射函数应用到每个元素所产生的映射流的内容替换此流中的每个元素的结果组成。每个映射的流在其内容被放入该流后将被关闭。(如果映射流为null，则使用空流。)</p><p><em>The flatMap() operation has the effect of applying aone-to-manytransformation to the elements of the stream, and thenflattening theresulting elements into a new stream.</em></p><p>flatMap()操作的效果是对流的元素应用一对多的转换，然后将产生的元素平铺成一个新的流。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; nameList = Stream.of(<span class="string">"ZhangSan"</span>, <span class="string">"Tom"</span>).collect(Collectors.toList());</span><br><span class="line">List&lt;String&gt; list = nameList.stream()</span><br><span class="line">.map(n -&gt; n.split(<span class="string">""</span>))</span><br><span class="line">.flatMap(e -&gt; Arrays.stream(e))</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Z, h, a, n, g, S, a, n, T, o, m]</span><br></pre></td></tr></table></figure><h2 id="list集合转map">7.List集合转Map</h2><p>List&lt;User&gt; 集合，设置 User.name作为Map的key，User对象作为value，转换为Map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, User&gt; userMap = userList.stream()</span><br><span class="line">.collect(Collectors.toMap(User::getName, Function.identity()));</span><br></pre></td></tr></table></figure><h2 id="针对list列表按照指定元素分组生成新的map集合">8.针对List列表，按照指定元素分组，生成新的Map集合</h2><p>例如对下面List列表的数据做分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> User(<span class="string">"zhangsan"</span>, <span class="number">12</span>, <span class="string">"Guangzhou"</span>);</span><br><span class="line"><span class="keyword">new</span> User(<span class="string">"lisi"</span>, <span class="number">13</span>, <span class="string">"Shenzhen"</span>);</span><br><span class="line"><span class="keyword">new</span> User(<span class="string">"tom"</span>, <span class="number">12</span>, <span class="string">"Beijing"</span>);</span><br></pre></td></tr></table></figure><p>分组操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;User&gt;&gt; map = userList.stream().collect(Collectors.groupingBy(User::getAge));</span><br></pre></td></tr></table></figure><p>分组结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">12=[</span><br><span class="line">User [name=zhangsan, age=12, address=Guangzhou], </span><br><span class="line">User [name=tom, age=12, address=Beijing]</span><br><span class="line">], </span><br><span class="line">13=[</span><br><span class="line">User [name=lisi, age=13, address=Shenzhen]</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 8
API添加了一个新的抽象称为流Stream，以一种声明的方式处理数据。Stream
使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java
集合运算和表达的高阶抽象。Stream
API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。这种风格将要处理的元素集合看作一种流，
流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选，
排序，聚合等。元素流在管道中经过中间操作（intermediate
operation）的处理，最后由最终操作(terminal
operation)得到前面处理的结果。&lt;/p&gt;
&lt;p&gt;————《菜鸟教程》&lt;/p&gt;
&lt;p&gt;本片文章记录了工作中常用的Stream流操作，方便之后回顾。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Stream" scheme="http://yoursite.com/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>处理SpringCloudConfig客户端启动无法读取到配置参数</title>
    <link href="http://yoursite.com/2023/02/01/%E5%A4%84%E7%90%86SpringCloudConfig%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E5%88%B0%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2023/02/01/处理SpringCloudConfig客户端启动无法读取到配置参数/</id>
    <published>2023-02-01T09:42:28.000Z</published>
    <updated>2023-02-02T01:39:41.198Z</updated>
    
    <content type="html"><![CDATA[<p>自己部署了一个Spring Cloud微服务项目，实践Spring CloudConfig分布式配置组件，按照Spring Cloud Config 资料<a href="http://c.biancheng.net/springcloud/config.html" target="_blank" rel="noopener">Config：SpringCloud分布式配置组件</a> 先后创建了Eureka注册中心服务、 Spring CloudConfig Server服务、 Spring Cloud Config Client客户端，在最后启动 SpringClient Config Client 客户端时，客户端始终无法访问 ConfigServer服务，读取上传在Gitee上的配置文件的内容。</p><p>在Baidu、Google搜索了大量资料，问题是最终解决了，但是这其中的原因，还需要继续探讨。</p><a id="more"></a><p>Eureka注册中心和Spring Cloud ConfigServer的配置内容就不多讲，可参考<a href="http://c.biancheng.net/springcloud/eureka.html" target="_blank" rel="noopener">Eureka：SpringCloud服务注册与发现组件</a> 和<a href="http://c.biancheng.net/springcloud/config.html" target="_blank" rel="noopener">Config：SpringCloud分布式配置组件</a>，启动了 Config Server服务，并用浏览器访问，上传在Gitee上的参数文件的内容是可以正常获取到的</p><img src="/2023/02/01/处理SpringCloudConfig客户端启动无法读取到配置参数/微信截图_20230201175150.png"><p>我们重点说一下Spring Cloud Config Client的配置，yml文件配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 3355 #端口号</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-cloud-config-client #服务名</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      label: master #分支名称</span><br><span class="line">      name: application  #配置文件名称，application-dev.yml 中的 config</span><br><span class="line">      profile: dev  #环境名  application-dev.yml 中的 dev</span><br><span class="line">      #这里不要忘记添加 http:// 否则无法读取</span><br><span class="line">      uri: http://localhost:3344 #Spring Cloud Config 服务端（配置中心）地址</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client: #将客户端注册到 eureka 服务列表内</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:9900/eureka</span><br></pre></td></tr></table></figure><p>新增Controller类，用于测试配置文件内容的读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/config/client&quot;)</span><br><span class="line">public class ConfigClientController &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    private String serverPort;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;config.info&#125;&quot;)</span><br><span class="line">    private String configInfo;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;config.version&#125;&quot;)</span><br><span class="line">    private String configVersion;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/getConfig&quot;)</span><br><span class="line">    public String getConfig() &#123;</span><br><span class="line">        return &quot;info：&quot; + configInfo + &quot;&lt;br/&gt;version：&quot; </span><br><span class="line">        + configVersion + &quot;&lt;br/&gt;port：&quot; + serverPort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Cloud Config Client客户端在启动的时候控制台报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder &apos;config.info&apos; in value &quot;$&#123;config.info&#125;&quot;</span><br><span class="line">at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180) ~[spring-core-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126) ~[spring-core-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239) ~[spring-core-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210) ~[spring-core-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:191) ~[spring-context-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936) ~[spring-beans-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1332) ~[spring-beans-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311) ~[spring-beans-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656) ~[spring-beans-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639) ~[spring-beans-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.23.jar:5.3.23]</span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.23.jar:5.3.23]</span><br><span class="line">... 16 common frames omitted</span><br><span class="line"></span><br><span class="line">Disconnected from the target VM, address: &apos;127.0.0.1:54601&apos;, transport: &apos;socket&apos;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>遂检查配置文件，对照资料教程看是不是自己写错了。在检查 Config Client模块的配置文件时发现，资料上创建的配置文件名称是<code>bootstrap.yml</code> 而非 <code>application.yml</code></p><p>遂把配置文件名改为 bootstrap.yml，重新启动，发现没有报之前的错误了。但是服务也没有正常运行起来，而是直接停止了，控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">2023-02-01 20:42:52.002  INFO 15096 --- [           main] com.netflix.discovery.DiscoveryClient    : Starting heartbeat executor: renew interval is: 30</span><br><span class="line">2023-02-01 20:42:52.005  INFO 15096 --- [           main] c.n.discovery.InstanceInfoReplicator     : InstanceInfoReplicator onDemand update allowed rate per min is 4</span><br><span class="line">2023-02-01 20:42:52.012  INFO 15096 --- [           main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1675255372011 with initial instances count: 2</span><br><span class="line">2023-02-01 20:42:52.015  INFO 15096 --- [           main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application SPRING-CLOUD-CONFIG-CLIENT with eureka with status UP</span><br><span class="line">2023-02-01 20:42:52.016  INFO 15096 --- [           main] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1675255372016, current=UP, previous=STARTING]</span><br><span class="line">2023-02-01 20:42:52.018  INFO 15096 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRING-CLOUD-CONFIG-CLIENT/DESKTOP-A5PHDVG:spring-cloud-config-client:3355: registering service...</span><br><span class="line">2023-02-01 20:42:52.033  INFO 15096 --- [           main] c.s.c.ConfigClientApplication            : Started ConfigClientApplication in 10.224 seconds (JVM running for 10.92)</span><br><span class="line">2023-02-01 20:42:52.040  INFO 15096 --- [ionShutdownHook] o.s.c.n.e.s.EurekaServiceRegistry        : Unregistering application SPRING-CLOUD-CONFIG-CLIENT with eureka with status DOWN</span><br><span class="line">2023-02-01 20:42:52.040  INFO 15096 --- [ionShutdownHook] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1675255372040, current=DOWN, previous=UP]</span><br><span class="line">2023-02-01 20:42:52.042  INFO 15096 --- [ionShutdownHook] com.netflix.discovery.DiscoveryClient    : Shutting down DiscoveryClient ...</span><br><span class="line">2023-02-01 20:42:52.076  INFO 15096 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRING-CLOUD-CONFIG-CLIENT/DESKTOP-A5PHDVG:spring-cloud-config-client:3355 - registration status: 204</span><br><span class="line">2023-02-01 20:42:52.077  INFO 15096 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRING-CLOUD-CONFIG-CLIENT/DESKTOP-A5PHDVG:spring-cloud-config-client:3355: registering service...</span><br><span class="line">2023-02-01 20:42:52.080  INFO 15096 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRING-CLOUD-CONFIG-CLIENT/DESKTOP-A5PHDVG:spring-cloud-config-client:3355 - registration status: 204</span><br><span class="line">2023-02-01 20:42:52.081  INFO 15096 --- [ionShutdownHook] com.netflix.discovery.DiscoveryClient    : Unregistering ...</span><br><span class="line">2023-02-01 20:42:52.085  INFO 15096 --- [ionShutdownHook] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRING-CLOUD-CONFIG-CLIENT/DESKTOP-A5PHDVG:spring-cloud-config-client:3355 - deregister  status: 200</span><br><span class="line">2023-02-01 20:42:52.091  INFO 15096 --- [ionShutdownHook] com.netflix.discovery.DiscoveryClient    : Completed shut down of DiscoveryClient</span><br><span class="line">Disconnected from the target VM, address: &apos;127.0.0.1:58233&apos;, transport: &apos;socket&apos;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>其中有一句<code>Registering application SPRING-CLOUD-CONFIG-CLIENT with eureka with status UP</code>，</p><p>查询资料，在这篇文章<a href="https://blog.csdn.net/m0_57545353/article/details/125411539" target="_blank" rel="noopener">SpringCloud中Client向Eureka注册中心注册服务成功后不久就Unregistering（Unregisteringapplication 服务名 with eureka with）</a>中有提出解决办法</p><blockquote><p>虽然 Config Client子模块依赖的父模块中，pom文件已经引入了spring-boot-web依赖，但是依旧要在 Config Client 子模块的pom文件上加上 spring-boot-web依赖 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;dependency&gt;</span><br><span class="line">&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&gt;   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&gt; &lt;/dependency&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>再次启动，服务启动成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">23-02-01 20:51:37.092  INFO 16848 --- [           main] c.n.discovery.InstanceInfoReplicator     : InstanceInfoReplicator onDemand update allowed rate per min is 4</span><br><span class="line">2023-02-01 20:51:37.098  INFO 16848 --- [           main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1675255897097 with initial instances count: 1</span><br><span class="line">2023-02-01 20:51:37.100  INFO 16848 --- [           main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application SPRING-CLOUD-CONFIG-CLIENT with eureka with status UP</span><br><span class="line">2023-02-01 20:51:37.100  INFO 16848 --- [           main] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1675255897100, current=UP, previous=STARTING]</span><br><span class="line">2023-02-01 20:51:37.103  INFO 16848 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRING-CLOUD-CONFIG-CLIENT/DESKTOP-A5PHDVG:spring-cloud-config-client:3355: registering service...</span><br><span class="line">2023-02-01 20:51:37.138  INFO 16848 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 3355 (http) with context path &apos;&apos;</span><br><span class="line">2023-02-01 20:51:37.139  INFO 16848 --- [           main] .s.c.n.e.s.EurekaAutoServiceRegistration : Updating port to 3355</span><br><span class="line">2023-02-01 20:51:37.164  INFO 16848 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRING-CLOUD-CONFIG-CLIENT/DESKTOP-A5PHDVG:spring-cloud-config-client:3355 - registration status: 204</span><br><span class="line">2023-02-01 20:51:38.241  INFO 16848 --- [           main] c.s.c.ConfigClientApplication            : Started ConfigClientApplication in 12.417 seconds (JVM running for 13.157)</span><br></pre></td></tr></table></figure><p>Eureka注册中心</p><img src="/2023/02/01/处理SpringCloudConfig客户端启动无法读取到配置参数/微信截图_20230201205231.png"><p>浏览器调用接口</p><img src="/2023/02/01/处理SpringCloudConfig客户端启动无法读取到配置参数/微信截图_20230201205330.png"><p>那么，为什么Spring Cloud Config Client 的配置文件为什么要用bootstrap.yml， 而不是 application ？ 这里有一篇文章有说明<a href="https://www.cnblogs.com/frankcui/p/15256664.html" target="_blank" rel="noopener">SpringCloudConfig - client连接server的设置写在application.yml,导致属性无法解析</a></p><p>Bootstrap.yml (bootstrap.properties) 是在application.yml(application.properties)之前加载的。它通常用于“使用SpringCloud ConfigServer时，应在bootstrap.yml中指定spring.application.name和spring.cloud.config.server.git.uri”以及一些加密/解密信息。</p><p>SpringCloud会创建一个<code>Bootstrap Context</code>（由bootstrap.yml加载），作为Spring应用的<code>Application Context</code>（由application.yml加载）的父上下文。初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment</code>。<code>Bootstrap</code>属性有高优先级，默认情况下，它们不会被本地配置覆盖。</p><p>例如，当使用SpringCloudConfig时，通常从服务器加载“真正的”配置数据。为了获取URL（和其他连接配置，如密码等），您需要一个较早的或“bootstrap”配置。因此，您将配置服务器属性放在bootstrap.yml中，该属性用于加载实际配置数据（通常覆盖application.yml[如果存在]中的内容）。</p><hr><p>补充：</p><p>在刚开始启动Spring Cloud Config Client 时，控制台提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">No spring.config.import property has been defined</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Add a spring.config.import=configserver: property to your configuration.</span><br><span class="line">If configuration is not required add spring.config.import=optional:configserver: instead.</span><br><span class="line">To disable this check, set spring.cloud.config.enabled=false or </span><br><span class="line">spring.cloud.config.import-check.enabled=false.</span><br><span class="line"></span><br><span class="line">Disconnected from the target VM, address: &apos;127.0.0.1:58966&apos;, transport: &apos;socket&apos;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>stackoverflow上有篇文章<a href="https://stackoverflow.com/questions/67507452/no-spring-config-import-property-has-been-defined" target="_blank" rel="noopener">Nospring.config.import property has beendefined</a>中给出解决办法，在pom文件中加上依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己部署了一个Spring Cloud微服务项目，实践Spring Cloud
Config分布式配置组件，按照Spring Cloud Config 资料&lt;a href=&quot;http://c.biancheng.net/springcloud/config.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Config：Spring
Cloud分布式配置组件&lt;/a&gt; 先后创建了Eureka注册中心服务、 Spring Cloud
Config Server服务、 Spring Cloud Config Client客户端，在最后启动 Spring
Client Config Client 客户端时，客户端始终无法访问 Config
Server服务，读取上传在Gitee上的配置文件的内容。&lt;/p&gt;
&lt;p&gt;在Baidu、
Google搜索了大量资料，问题是最终解决了，但是这其中的原因，还需要继续探讨。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring Cloud Config" scheme="http://yoursite.com/tags/Spring-Cloud-Config/"/>
    
  </entry>
  
  <entry>
    <title>Arrays.asList()生成的对象不能执行add()的操作</title>
    <link href="http://yoursite.com/2023/01/12/Arrays-asList-%E7%94%9F%E6%88%90%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%B8%8D%E8%83%BD%E6%89%A7%E8%A1%8Cadd-%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2023/01/12/Arrays-asList-生成的对象不能执行add-的操作/</id>
    <published>2023-01-12T08:20:11.000Z</published>
    <updated>2023-01-13T01:43:04.478Z</updated>
    
    <content type="html"><![CDATA[<p>之前项目上，有使用 Arrays.asList()创建一个List集合，并在后续的操作中使用之前创建的List集合继续 add()添加元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>);</span><br><span class="line">list.add(<span class="string">"five"</span>);</span><br></pre></td></tr></table></figure><p>运行项目却在 list.add("five"); 处报错： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span><br><span class="line">at java.util.AbstractList.add(AbstractList.java:148)</span><br><span class="line">at java.util.AbstractList.add(AbstractList.java:108)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>网上搜索资料得知， Arrays.asList() 生成的 ArrayList 对象是 Arrays自己的内部类对象</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a fixed-size list backed by the specified array.  (Changes to</span></span><br><span class="line"><span class="comment"> * the returned list "write through" to the array.)  This method acts</span></span><br><span class="line"><span class="comment"> * as bridge between array-based and collection-based APIs, in</span></span><br><span class="line"><span class="comment"> * combination with &#123;<span class="doctag">@link</span> Collection#toArray&#125;.  The returned list is</span></span><br><span class="line"><span class="comment"> * serializable and implements &#123;<span class="doctag">@link</span> RandomAccess&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method also provides a convenient way to create a fixed-size</span></span><br><span class="line"><span class="comment"> * list initialized to contain several elements:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     List&amp;lt;String&amp;gt; stooges = Arrays.asList("Larry", "Moe", "Curly");</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the class of the objects in the array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a the array by which the list will be backed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a list view of the specified array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"varargs"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span> include</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line"></span><br><span class="line">    ArrayList(E[] array) &#123;</span><br><span class="line">        a = Objects.requireNonNull(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> a.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">int</span> size = size();</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            <span class="keyword">return</span> Arrays.copyOf(<span class="keyword">this</span>.a, size,</span><br><span class="line">                                 (Class&lt;? extends T[]&gt;) a.getClass());</span><br><span class="line">        System.arraycopy(<span class="keyword">this</span>.a, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        E oldValue = a[index];</span><br><span class="line">        a[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        E[] a = <span class="keyword">this</span>.a;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">                <span class="keyword">if</span> (a[i] == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(a[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliterator(a, Spliterator.ORDERED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (E e : a) &#123;</span><br><span class="line">            action.accept(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(operator);</span><br><span class="line">        E[] a = <span class="keyword">this</span>.a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            a[i] = operator.apply(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(a, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArrayList 继承自 AbstractList，而 AbstractList 的 add() 方法抛出UnsupportedOperationException 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This implementation always throws an</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException            &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException          &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException      &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException     &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当然，AbstractList 的 remove() 方法也是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This implementation always throws an</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException     &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以可以使用其他方式创建List集合对象</p><p>方法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>));</span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Stream.of(<span class="string">"str1"</span>, <span class="string">"str2"</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前项目上，有使用 Arrays.asList()
创建一个List集合，并在后续的操作中使用之前创建的List集合继续 add()
添加元素。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.add(&lt;span class=&quot;string&quot;&gt;&quot;five&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行项目却在 list.add(&quot;five&quot;); 处报错： &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.UnsupportedOperationException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at java.util.AbstractList.add(AbstractList.java:148)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at java.util.AbstractList.add(AbstractList.java:108)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;网上搜索资料得知， Arrays.asList() 生成的 ArrayList 对象是 Arrays
自己的内部类对象&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Arrays.asList" scheme="http://yoursite.com/tags/Arrays-asList/"/>
    
  </entry>
  
  <entry>
    <title>关于《软件设计师教程第5版》UML构件图两类接口描述错误的问题</title>
    <link href="http://yoursite.com/2022/11/03/%E5%85%B3%E4%BA%8E%E3%80%8A%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E6%95%99%E7%A8%8B%E7%AC%AC5%E7%89%88%E3%80%8BUML%E6%9E%84%E4%BB%B6%E5%9B%BE%E4%B8%A4%E7%B1%BB%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%B0%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2022/11/03/关于《软件设计师教程第5版》UML构件图两类接口描述错误的问题/</id>
    <published>2022-11-03T03:47:00.000Z</published>
    <updated>2022-11-03T03:48:14.347Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/11/03/关于《软件设计师教程第5版》UML构件图两类接口描述错误的问题/微信截图_20221103111026.png"><p>如图所示，在备考软件设计师时，有遇到关于 构件图 的题目，官方给的<code>-（</code> 是供接口，<code>O-</code>是需接口，就像官方教程上展示的这样。但是发现有其他人说 <code>-（</code>是需接口，<code>O-</code>是供接口。这就很懵圈了，然后我搜索国内的资料，也都是说：<code>-（</code> 是需接口，<code>O-</code> 是供接口</p><a id="more"></a><p><a href="https://www.cnblogs.com/zhanchenjin/p/16658561.html" target="_blank" rel="noopener">#UML设计图10-构件图</a></p><img src="/2022/11/03/关于《软件设计师教程第5版》UML构件图两类接口描述错误的问题/微信截图_20221103112133.png"><p><a href="https://www.baidu.com/link?url=GdYQRWlkvBCkHJ-YIEsibtDFzoS-PUpXa_-qZ4noYZMLMZ4zYYrYA01ishPu7yYqOn-22Bo9KlUI1dyPcuaYa_&amp;wd=&amp;eqid=993235b0000028d70000000663633490" target="_blank" rel="noopener">#【UML简明教程】接口 - Tim的资源站</a></p><img src="/2022/11/03/关于《软件设计师教程第5版》UML构件图两类接口描述错误的问题/微信截图_20221103112530.png"><p>我也去外网上搜索了一下，搜索到的资料也都显示的是： <code>-（</code>是需接口，<code>O-</code> 是供接口</p><p><a href="https://ducmanhphan.github.io/2020-01-27-The-different-types-of-Interfaces-in-UML-diagrams/" target="_blank" rel="noopener">#The different types of interfaces in UML diagram</a></p><img src="/2022/11/03/关于《软件设计师教程第5版》UML构件图两类接口描述错误的问题/微信截图_20221103112821.png"><p><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-component-diagram/" target="_blank" rel="noopener">#What is Component Diagram? </a></p><img src="/2022/11/03/关于《软件设计师教程第5版》UML构件图两类接口描述错误的问题/微信截图_20221103112956.png"><blockquote><p>从互联网上多数资料来看，正确的应该是 <code>-（</code>是需接口，<code>O-</code> 是供接口</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2022/11/03/关于《软件设计师教程第5版》UML构件图两类接口描述错误的问题/微信截图_20221103111026.png&quot;&gt;
&lt;p&gt;如图所示，在备考软件设计师时，有遇到关于 构件图 的题目，官方给的
&lt;code&gt;-（&lt;/code&gt; 是供接口，&lt;code&gt;O-&lt;/code&gt;
是需接口，就像官方教程上展示的这样。但是发现有其他人说 &lt;code&gt;-（&lt;/code&gt;
是需接口，&lt;code&gt;O-&lt;/code&gt;
是供接口。这就很懵圈了，然后我搜索国内的资料，也都是说：
&lt;code&gt;-（&lt;/code&gt; 是需接口，&lt;code&gt;O-&lt;/code&gt; 是供接口&lt;/p&gt;
    
    </summary>
    
    
      <category term="升级之路" scheme="http://yoursite.com/categories/%E5%8D%87%E7%BA%A7%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="软件设计" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="UML" scheme="http://yoursite.com/tags/UML/"/>
    
      <category term="构件图" scheme="http://yoursite.com/tags/%E6%9E%84%E4%BB%B6%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>根据JetBrains Fleet文档创建maven项目失败的解决办法</title>
    <link href="http://yoursite.com/2022/10/26/%E6%A0%B9%E6%8D%AEJetBrains%20Fleet%E6%96%87%E6%A1%A3%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2022/10/26/根据JetBrains Fleet文档创建maven项目失败的解决办法/</id>
    <published>2022-10-26T08:46:26.000Z</published>
    <updated>2022-10-26T09:24:04.204Z</updated>
    
    <content type="html"><![CDATA[<p>打算尝试一下Fleet编辑器，根据<a href="https://www.jetbrains.com/help/fleet/getting-started-with-java-in-fleet.html#open-workspace" target="_blank" rel="noopener">JetBrainsFleet文档</a>创建maven项目.</p><p>首选确认本地机器上已经安装并配置了maven</p><p>按照文档提示，通过<code>CTRL+ALT+T</code> 打开 terminal窗口，在编辑器的下方</p><p>粘贴并执行<code>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false</code></p><p>创建失败，提下如下</p><img src="/2022/10/26/根据JetBrains%20Fleet文档创建maven项目失败的解决办法/QQ截图20221026170547.png"><a id="more"></a><p>然后google之，在stackoverflow上发现了这篇文章 <a href="https://stackoverflow.com/questions/16348459/error-the-goal-you-specified-requires-a-project-to-execute-but-there-is-no-pom" target="_blank" rel="noopener">https://stackoverflow.com/questions/16348459/error-the-goal-you-specified-requires-a-project-to-execute-but-there-is-no-pom</a></p><img src="/2022/10/26/根据JetBrains%20Fleet文档创建maven项目失败的解决办法/QQ截图20221026170831.png"><img src="/2022/10/26/根据JetBrains%20Fleet文档创建maven项目失败的解决办法/UFqqh.png"><p>简而言之：<em>必须用引号括起所有参数</em></p><p>于是重新修改了mvn命令并重新执行</p><p><code>mvn archetype:generate "-DgroupId=com.mycompany.app" "-DartifactId=my-app" "-DarchetypeArtifactId=maven-archetype-quickstart" "-DarchetypeVersion=1.4" "-DinteractiveMode=false"</code></p><p>于是maven项目创建成功</p><img src="/2022/10/26/根据JetBrains%20Fleet文档创建maven项目失败的解决办法/QQ截图20221026171206.png"><img src="/2022/10/26/根据JetBrains%20Fleet文档创建maven项目失败的解决办法/QQ截图20221026171222.png">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打算尝试一下Fleet编辑器，根据&lt;a href=&quot;https://www.jetbrains.com/help/fleet/getting-started-with-java-in-fleet.html#open-workspace&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JetBrains
Fleet文档&lt;/a&gt;创建maven项目.&lt;/p&gt;
&lt;p&gt;首选确认本地机器上已经安装并配置了maven&lt;/p&gt;
&lt;p&gt;按照文档提示，通过&lt;code&gt;CTRL+ALT+T&lt;/code&gt; 打开 terminal
窗口，在编辑器的下方&lt;/p&gt;
&lt;p&gt;粘贴并执行
&lt;code&gt;mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建失败，提下如下&lt;/p&gt;
&lt;img src=&quot;/2022/10/26/根据JetBrains%20Fleet文档创建maven项目失败的解决办法/QQ截图20221026170547.png&quot;&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="根据JetBrains" scheme="http://yoursite.com/tags/%E6%A0%B9%E6%8D%AEJetBrains/"/>
    
      <category term="Fleet" scheme="http://yoursite.com/tags/Fleet/"/>
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>MySQL根据出生日期计算当前年龄</title>
    <link href="http://yoursite.com/2022/10/21/MySQL%E6%A0%B9%E6%8D%AE%E5%87%BA%E7%94%9F%E6%97%A5%E6%9C%9F%E8%AE%A1%E7%AE%97%E5%BD%93%E5%89%8D%E5%B9%B4%E9%BE%84/"/>
    <id>http://yoursite.com/2022/10/21/MySQL根据出生日期计算当前年龄/</id>
    <published>2022-10-21T06:03:18.000Z</published>
    <updated>2022-10-21T06:05:57.880Z</updated>
    
    <content type="html"><![CDATA[<p>假如人员的出生日期为 <code>1994-10-01</code>，首先用 MySQL 的<code>now()</code>函数获取当前系统日期，然后利用<code>DATE_FORMAT()</code>函数计算出当前年龄。</p><a id="more"></a><blockquote><p>注意：<code>DATE_FORMAT()</code> 方法后面要加<code>0</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">FROM_DAYS</span>(<span class="keyword">DATEDIFF</span>(<span class="keyword">now</span>(), <span class="string">'1994-10-01'</span>)), <span class="string">'%Y'</span>)+<span class="number">0</span> <span class="keyword">as</span> age</span><br></pre></td></tr></table></figure><p>实践一下，当前系统时间为 2022-08-29 10:50:54</p><img src="/2022/10/21/MySQL根据出生日期计算当前年龄/1.png"><ul><li><code>DATEDIFF()</code> 函数返回两个日期之间的天数。</li><li><code>FROM_DAYS()</code>函数：给定一个天数N，并返回一个日期值。</li><li><code>DATE_FORMAT()</code>函数用于以不同的格式显示日期/时间数据。</li></ul><blockquote><p>使用FROM_DAYS()谨慎旧日期，它不打算使用与之前的公历(1582年)的到来值。</p></blockquote><hr><p>参考资料：</p><p><a href="https://www.tutorialspoint.com/calculate-age-based-on-date-of-birth-in-mysql" target="_blank" rel="noopener">https://www.tutorialspoint.com/calculate-age-based-on-date-of-birth-in-mysql</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假如人员的出生日期为 &lt;code&gt;1994-10-01&lt;/code&gt;，首先用 MySQL 的
&lt;code&gt;now()&lt;/code&gt;
函数获取当前系统日期，然后利用&lt;code&gt;DATE_FORMAT()&lt;/code&gt;
函数计算出当前年龄。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>处理MySQL使用concat()函数时遇到null值的问题</title>
    <link href="http://yoursite.com/2022/10/21/%E5%A4%84%E7%90%86MySQL%E4%BD%BF%E7%94%A8concat-%E5%87%BD%E6%95%B0%E6%97%B6%E9%81%87%E5%88%B0null%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2022/10/21/处理MySQL使用concat-函数时遇到null值的问题/</id>
    <published>2022-10-21T05:43:23.000Z</published>
    <updated>2023-02-21T07:19:13.550Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述">问题描述</h4><p>使用<code>CONCAT()</code>拼接结果是，当<code>CONCAT()</code>函数中的一个参数为<code>null</code>，那么不管其他字符串是否有值，最后返回的拼接结果总是<code>null</code>，如下所示：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">name</span>,</span><br><span class="line">address,</span><br><span class="line">nationality,</span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="string">'my name is '</span>, <span class="keyword">name</span>, <span class="string">', to live in '</span>, address, <span class="string">', and i am from '</span>, nationality) <span class="keyword">as</span> <span class="keyword">str</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`user2`</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><img src="/2022/10/21/处理MySQL使用concat-函数时遇到null值的问题/1.png"><p>MySQL 官方文档有句话</p><img src="/2022/10/21/处理MySQL使用concat-函数时遇到null值的问题/2.png"><h4 id="解决办法">解决办法</h4><ol type="1"><li>使用 <code>COALESCE()</code> 函数转换null值</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">name</span>,</span><br><span class="line">address,</span><br><span class="line">nationality,</span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="string">'my name is '</span>, <span class="keyword">COALESCE</span>(<span class="keyword">name</span>, <span class="string">''</span>), <span class="string">', to live in '</span>, <span class="keyword">COALESCE</span>(address, <span class="string">''</span>), <span class="string">', and i am from '</span>, <span class="keyword">COALESCE</span>(nationality, <span class="string">''</span>)) <span class="keyword">as</span> <span class="keyword">str</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`user2`</span></span><br></pre></td></tr></table></figure><img src="/2022/10/21/处理MySQL使用concat-函数时遇到null值的问题/3.png"><ol start="2" type="1"><li>使用<code>IFNULL()</code> 函数转换null值 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">name</span>,</span><br><span class="line">address,</span><br><span class="line">nationality,</span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="string">'my name is '</span>, <span class="keyword">ifnull</span>(<span class="keyword">name</span>, <span class="string">''</span>), <span class="string">', to live in '</span>, <span class="keyword">ifnull</span>(address, <span class="string">''</span>), <span class="string">', and i am from '</span>, <span class="keyword">ifnull</span>(nationality, <span class="string">''</span>)) <span class="keyword">as</span> <span class="keyword">str</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`user2`</span></span><br></pre></td></tr></table></figure></li></ol><img src="/2022/10/21/处理MySQL使用concat-函数时遇到null值的问题/4.png"><ol start="3" type="1"><li>尝试使用<code>CONCAT_WS()</code> 函数拼接字符串 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">name</span>,</span><br><span class="line">address,</span><br><span class="line">nationality,</span><br><span class="line"><span class="keyword">CONCAT_WS</span>(<span class="string">','</span>,<span class="keyword">name</span>,address,nationality) <span class="keyword">as</span> <span class="keyword">str</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`user2`</span></span><br></pre></td></tr></table></figure></li></ol><img src="/2022/10/21/处理MySQL使用concat-函数时遇到null值的问题/5.png"><hr><p>参考资料：</p><ol type="1"><li><p><a href="https://stackoverflow.com/questions/15741314/mysql-concat-returns-null-if-any-field-contain-null" target="_blank" rel="noopener">https://stackoverflow.com/questions/15741314/mysql-concat-returns-null-if-any-field-contain-null</a></p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat" target="_blank" rel="noopener">12.8String Functions and Operators</a></p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html#function_ifnull" target="_blank" rel="noopener">12.5Flow Control Functions</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;问题描述&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;CONCAT()&lt;/code&gt;拼接结果是，当&lt;code&gt;CONCAT()&lt;/code&gt;函数中的一个参数为&lt;code&gt;null&lt;/code&gt;，那么不管其他字符串是否有值，最后返回的拼接结果总是&lt;code&gt;null&lt;/code&gt;，如下所示：
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	address,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nationality,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;CONCAT&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;my name is &#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;, to live in &#39;&lt;/span&gt;, address, &lt;span class=&quot;string&quot;&gt;&#39;, and i am from &#39;&lt;/span&gt;, nationality) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`user2`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>货币的发行</title>
    <link href="http://yoursite.com/2022/07/25/%E8%B4%A7%E5%B8%81%E7%9A%84%E5%8F%91%E8%A1%8C/"/>
    <id>http://yoursite.com/2022/07/25/货币的发行/</id>
    <published>2022-07-25T07:06:15.000Z</published>
    <updated>2022-07-29T07:04:22.046Z</updated>
    
    <content type="html"><![CDATA[<p>中国共产党的货币实践有一个特点，就是货币本位十分灵活（当然也有革命条件艰苦缺乏贵金属的因素），从革命战争年代到改革开放以前长期实行的是一种“物资本位”。下面以长征时期的货币发行实践举例，题主大概可以见微知著，了解“物资本位”货币的发行、流通与回收</p><a id="more"></a><p>1935年1月7日，红军攻占遵义城。遵义是贵州省内仅次于贵阳的第二大城市，一向为黔北中心，各种土产集散地，汉、苗等族商旅云集之所，市场十分繁华，是红军长征以来所经过的第一座繁华的中等城市。</p><p>红军大部队进城时，群众已发动起来，“各种商店都已开门营业，百货日用品、食品到处都是，街上行人也很多，有赶街市的，有看热闹的，有做宣传的，还有高声叫卖麻糖的”。久困大山、长期作战的红军指战员，得到这么一个难得的休整机会，来到这么一个有大量东西可买的地方，也急需用经费购买生活、医疗等用品，以利今后的行军打仗。</p><p>但由于红军指战员随身携带的经费一部分或全部是苏维埃国家银行在中央苏区发行的苏维埃纸币，它们在白区无法流通，得不到当地百姓的认可。另一方面，当年遵义作为国民党政府的一个行署，管辖十来个县，自是军阀、官僚、地主、奸商相互勾结的地方，贵州军阀王家烈便在这里称雄一方。他在遵义开有烟馆、盐行，囤积了价值几十万元的食盐和大量烟土。当地缺盐，他一手操纵市场，以高价出售。其时猪肉才两角钱一斤，盐巴倒要四角钱一斤。许多老百姓因为买不起盐而患大脖子病。</p><p>苏维埃国家银行对上述情况进行了充分的估量，认为这种一面到处是商机、商业活动，一面群众严重缺盐而军阀囤积居奇的局面，有利于发行苏维埃钞票，主导市场，满足群众需要。他们把没收来的大量食盐和其他稀缺物资以低价卖给群众，规定只收苏维埃钞票，不收其他货币。而且一元苏维埃钞票可到兑换点换取一元二角现洋，或两元国民党的钞票。由于国家银行有充足的现金(银圆、金条等)和物资保证，发行的苏维埃钞票完全可以兑现，遵义城及附近驻有红军部队的城镇的群众和商家都乐于接纳、使用苏维埃钞票，红军指战员得以用手中的苏维埃币购买必要的物资。苏维埃钞票信誉盛极一时，市面也空前繁荣。为此，国家银行的工作人员在遵义度过了最为忙碌的10天。</p><p>由于无法在遵义建立稳固的根据地，红军决定撤离遵义。在红军撤离遵义前，为避免百姓蒙受损失或招来报复，苏维埃国家银行连夜组织回笼苏维埃币。这样，短短的十几天里，苏维埃国家银行完成了苏维埃币的发行、流通与回收，创造了一个奇迹。</p><p>国家银行在遵义发行、回笼苏维埃钞票的做法，既活跃了市场，保障了红军的供给，又维护了苏维埃钞票的信誉，维护了群众的利益，因而在当地留下了很好的影响，树立了共产党和红军的良好形象。对于当年少数还流散在群众手中的苏维埃钞票，1955年国家发行新的人民币时，还以1∶1的比价兑回了。</p><p>-- 以上来自 <a href="https://www.zhihu.com/question/25049553/answer/32176501" target="_blank" rel="noopener">知乎方亮</a></p><hr><p>关于货币发行的问题，可能大多数人是不清楚的，但是不了解货币发行的原理，对于各种经济学现象就不能真正的理解。关于中国目前货币是如何发行的，这样发行的道理又是什么，本人做了以下研究和思考。</p><p>首先国内货币的发行，离不开中国人民银行（简称央行，是中华人民共和国的中央银行）。本人理解央行和现代企业运行的基本规则是相似的。企业的主要职责是赚取利润，而央行的主要职责就是通过控制市场中货币的数量，来实现物价稳定（即通货膨胀指标）、经济发展、充分就业、国际收支平衡（汇率指标）等目标。央行对外提供借款，需要设定利率和借款期限，到期收回借款，央行可以对外支付对价购买外汇、债券等资产，这些都是和企业的运行规则是相似的。</p><p>央行控制市场中货币数量的方法主要包括向商业银行购买外汇和提供贷款。其中提供贷款又可细分为MLF、PSL等公开市场操作投放和再贷款、再贴现投放。</p><p>首先要说明的央行向商业银行购买外汇。目前国际贸易中主要是以美元结算，因为美国的超级大国的国际地位，让美元成为类似于黄金的硬通货。正是因为美元作为国际结算的主要货币，所以国家需要储备美元资产。国内的对外贸易公司通过向国外出售商品赚取到了美元，将一部分需要兑换成人民币的美元出售给中国银行（国内一般都是出售给中国银行），央行再向商业银行购买这部分外汇。央行购买的外汇向国外换为其他资产，如下图所示。</p><img src="/2022/07/25/货币的发行/v2-7f38fbd86bb35d1fdc96a381a7e63765_720w.jpg"><p>央行购买外汇支付的是债券（即人民币），这里债券相当于借条，只不过因为央行的地位，这张借条有了在市场流通的价值，可以在市场中购买资产，所以也就不需要用这张借条向央行要求还资产了。（在这里要说明的是，央行对外支付的货币可以是纸质也可以是账户里的余额，两者是等价的。在现实生活中，纸质货币能满足大家的一些使用需求，所以央行需要投放和更换市场中的纸质货币，满足大家对纸质货币的使用需求。但市场中的货币，现金（M0)只占其中一小部分，货币大部分以银行存款的余额和其他形式存在，这里不做过多解释。）央行和商业银行的资产负债表如下图所示。</p><img src="/2022/07/25/货币的发行/v2-82204188854ed918b280b4e7556b6a0a_720w.jpg"><p>央行从商业银行手中买入资产，通过增加商业银行在央行账户的存款准备金为支付手段。商业银行可以在超出央行规定的存款准备金比例之外的资金支取，用于银行的对外贷款等业务，从而增加了货币在市场中的数量。</p><img src="/2022/07/25/货币的发行/v2-0068f48a4d91a8e0dcee4a9510e52b36_720w.jpeg"><p>央行在向商业银行提供贷款中，央行增加债权资产和商业银行存款负债，商业银行增加负债和央行存款。央行向商业银行提供贷款同样增加了市场中货币的数量。</p><p>增加的货币数量，通过货币乘数，转化为真正的货币增量。（具体原理：假设甲有1000元的现金，存在商业银行A活期存款帐户。银行按照中央银行的要求，把其中10%（100元）交纳法定准备金，存入中央银行。剩下的900元可以全部贷出去，贷给乙。乙把这些钱再存入乙在B银行的帐户，B银行再交给中国人民银行90元，剩下的再贷出去。周而复始，理论上可以产生10000（1000/10%）元的活期存款。那么这个货币乘数就是10。10000元为真正增加的货币数量）</p><p>以上是央行控制市场中货币数量的方法，央行会根据市场是否缺少流动性，来调整其以上方法的使用力度，达到其想要实施的货币政策。</p><p>市场中货币数量的增加，在总商品数量不变的情况下，会引起商品价格的上升，货币总是追逐相对有些的商品引起价格的上升。因此当货币发行的速度，大于GDP的增长速度，那么就会带来通货膨胀。在通货膨胀的过程中，谁会受益呢？应该是能从价格上升中得到益处的人。通过努力，在这个过程中拥有较多具有保值功能的资产的人会受益。还有谁会受益呢，能够利用流动性宽裕的人，通过其良好的运作，可以在其中获益。</p><p>-- 以上来自 <a href="https://zhuanlan.zhihu.com/p/89363149" target="_blank" rel="noopener">知乎大峰哥</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中国共产党的货币实践有一个特点，就是货币本位十分灵活（当然也有革命条件艰苦缺乏贵金属的因素），从革命战争年代到改革开放以前长期实行的是一种“物资本位”。下面以长征时期的货币发行实践举例，题主大概可以见微知著，了解“物资本位”货币的发行、流通与回收&lt;/p&gt;
    
    </summary>
    
    
      <category term="兴趣使然" scheme="http://yoursite.com/categories/%E5%85%B4%E8%B6%A3%E4%BD%BF%E7%84%B6/"/>
    
    
      <category term="货币" scheme="http://yoursite.com/tags/%E8%B4%A7%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>Java抽象类和接口</title>
    <link href="http://yoursite.com/2020/07/08/Java%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2020/07/08/Java抽象类和接口/</id>
    <published>2020-07-08T05:36:47.000Z</published>
    <updated>2022-10-21T06:11:36.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先说对这两个概念的理解">先说对这两个概念的理解</h3><p>我们先说抽象类，其实抽象类的设计理念是“is-a”关系，就是说它更关心的是被抽象的这些个对象是什么，比如说藏獒，贵宾，哈士奇，我们要给他们写抽象类，那抽象出来这个类就是狗狗类，无论什么品种的狗，都是狗狗。</p><p>再说说接口，接口的设计理念是“has-a”关系，它关心的能做什么，比如说你可以写一个接口，里面有吠()这个方法，再写一个接口，里面有跑()这个方法，那么你可以让狗狗类实现这两个方法，让狗狗拥有这两项功能。而你可以发现，人类，喵类也都可以实现整个跑这个接口来拥有这项功能。</p><a id="more"></a><p>所以在java中，类的单继承多实现的概念就好理解了，狗狗只能继承狗狗这个类，不可能让它去继承人类或者喵类，但能实现n多个接口，跑、跳、吠、打滚。</p><p>在应用场景中，抽象类用于同类事物，而接口多是可以横跨很多个类。</p><h3 id="他们有哪些具体区别呢">他们有哪些具体区别呢？</h3><p>1）抽象类则可以包含普通方法，接口中的普通方法默认为抽象方法。</p><p>2）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final 类型的，并且必须赋值，否则通不过编译。</p><p>3）接口不能包含构造器，抽象类可以包含构造器，抽象类里的构造器并不是用于创建对象，而是让其子类调用这些构造器来完成属于抽象类的初始化操作。</p><p>4）接口里不能包含初始化块，但抽象类里完全可以包含初始化块。</p><p>5）就是我们所说的单继承多实现了。</p><p>最后，送上我在一本书上看到的特别绕的三句话，接口可以继承接口，抽象类可以实现接口，抽象类可以继承具体类。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;先说对这两个概念的理解&quot;&gt;先说对这两个概念的理解&lt;/h3&gt;
&lt;p&gt;我们先说抽象类，其实抽象类的设计理念是“is-a”关系，就是说它更关心的是被抽象的这些个对象是什么，比如说藏獒，贵宾，哈士奇，我们要给他们写抽象类，那抽象出来这个类就是狗狗类，无论什么品种的狗，都是狗狗。&lt;/p&gt;
&lt;p&gt;再说说接口，接口的设计理念是“has-a”关系，它关心的能做什么，比如说你可以写一个接口，里面有吠()这个方法，再写一个接口，里面有跑()这个方法，那么你可以让狗狗类实现这两个方法，让狗狗拥有这两项功能。而你可以发现，人类，喵类也都可以实现整个跑这个接口来拥有这项功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="抽象类" scheme="http://yoursite.com/tags/%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    
      <category term="接口" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务</title>
    <link href="http://yoursite.com/2020/04/26/MySQL%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2020/04/26/MySQL事务/</id>
    <published>2020-04-26T02:38:32.000Z</published>
    <updated>2022-07-25T06:26:34.838Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL数据库事务是一组原子性的SQL单元，事务内的语句要么全部执行成功，要么全部执行失败。</p><h3 id="事务的四个特性">事务的四个特性</h3><ul><li>原子性（Atomicity）事务必须是原子工作单元，事务中的操作要么全部执行成功，要么全部执行失败，不能只执行部分操作。</li><li>一致性事务开始之前，数据库处于一致性的状态；事务结束后，数据库必须仍处于一致性状态。数据库一致性的定义是由用户负责的。例如，在银行转账中，用户可以定义转账前后两个账户金额之和保持不变。</li><li>隔离性通常来说一个事务在修改时但还未提交，对其他事务是不可见的。</li><li>持久性-一旦事务提交，则其所做的修改就会永久保存在数据库中。此时即使系统崩溃，修改的数据也不会丢失。</li></ul><a id="more"></a><h3 id="事务的脏读不可重复读幻读">事务的脏读、不可重复读、幻读</h3><ul><li>脏读：事务 A 读取了事务 B 更新后的数据，但是事务 B没有提交，然后事务 B 执行回滚操作，那么事务 A读到的数据就是脏数据。</li><li>不可重复读：事务 A 进行多次读取操作，事务 B 在事务 A多次读取的过程中执行更新操作并提交，提交后事务 A 读到的数据不一致。</li><li>幻读：事务 A 将数据库中所有学生的成绩由 A -&gt; B，此时事务 B手动插入了一条成绩为 A 的记录，在事务 A更改完毕后，发现还有一条记录没有修改，那么这种情况就叫做出现了幻读。</li></ul><h3 id="事务的隔离级别">事务的隔离级别</h3><p>读未提交(read uncommitted)、读已提交(readcommitted)、可重复读(repetable read) 和 串行化(serializable)。</p><ul><li><p>读未提交：读未提交指的是一个事务在提交之前，它所做的修改就能够被其他事务所看到。</p></li><li><p>读已提交：读已提交指的是一个事务在提交之后，它所做的变更才能够让其他事务看到。</p></li><li><p>可重复读：可重复读指的是一个事务在执行的过程中，看到的数据是和启动时看到的数据是一致的。未提交的变更对其他事务不可见。</p></li><li><p>串行化：顾名思义是对于同一行记录，写会加写锁，读会加读锁。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p></li></ul><img src="/2020/04/26/MySQL事务/640.png"><p>隔离级别由低到高是：读未提交 &lt; 读已提交 &lt; 可重复读 &lt;串行化</p><h3 id="mysql-常见存储引擎的区别">MySQL 常见存储引擎的区别</h3><p>通过SQL语句 <code>SHOW ENGINES</code>查看存储引擎</p><img src="/2020/04/26/MySQL事务/641.png"><p>可以看到，InnoDB 是 MySQL默认支持的存储引擎，支持事务、行级锁定和外键。</p><h4 id="myisam-存储引擎的特点">MyISAM 存储引擎的特点</h4><p>在 5.1 版本之前，MyISAM 是 MySQL 的默认存储引擎，MyISAM并发性比较差，使用的场景比较少，主要特点是</p><ul><li><p>不支持事务操作，ACID的特性也就不存在了，这一设计是为了性能和效率考虑的。</p></li><li><p>不支持外键操作，如果强行增加外键，MySQL不会报错，只不过外键不起作用。</p></li><li><p>MyISAM默认的锁粒度是表级锁，所以并发性能比较差，加锁比较快，锁冲突比较少，不太容易发生死锁的情况。</p></li><li><p>MyISAM 会在磁盘上存储三个文件，文件名和表名相同，扩展名分别是.frm(存储表定义)、.MYD(MYData,存储数据)、MYI(MyIndex,存储索引)。这里需要特别注意的是MyISAM 只缓存索引文件，并不缓存数据文件。</p></li><li><p>MyISAM 支持的索引类型有 全局索引(Full-Text)、B-Tree 索引、R-Tree索引 Full-Text索引：它的出现是为了解决针对文本的模糊查询效率较低的问题。 B-Tree索引：所有的索引节点都按照平衡树的数据结构来存储，所有的索引数据节点都在叶节点R-Tree索引：它的存储方式和 B-Tree索引有一些区别，主要设计用于存储空间和多维数据的字段做索引,目前的 MySQL版本仅支持 geometry 类型的字段作索引，相对于 BTREE，RTREE的优势在于范围查找。</p></li><li><p>数据库所在主机如果宕机，MyISAM的数据文件容易损坏，而且难以恢复。</p></li><li><p>增删改查性能方面：SELECT 性能较高，适用于查询较多的情况</p></li></ul><h4 id="innodb-存储引擎的特点">InnoDB 存储引擎的特点</h4><p>自从 MySQL 5.1 之后，默认的存储引擎变成了 InnoDB 存储引擎，相对于MyISAM，InnoDB 存储引擎有了较大的改变，它的主要特点是</p><ul><li><p>支持事务操作，具有事务 ACID隔离特性，默认的隔离级别是可重复读(repetable-read)、通过MVCC（并发版本控制）来实现的。能够解决脏读和不可重复读的问题。</p></li><li><p>InnoDB 支持外键操作。</p></li><li><p>InnoDB默认的锁粒度行级锁，并发性能比较好，会发生死锁的情况。</p></li><li><p>和 MyISAM 一样的是，InnoDB 存储引擎也有 .frm文件存储表结构定义，但是不同的是，InnoDB 的表数据与索引数据是存储在一起的，都位于 B+数的叶子节点上，而 MyISAM 的表数据和索引数据是分开的。</p></li><li><p>InnoDB有安全的日志文件，这个日志文件用于恢复因数据库崩溃或其他情况导致的数据丢失问题，保证数据的一致性。</p></li><li><p>InnoDB 和 MyISAM支持的索引类型相同，但具体实现因为文件结构的不同有很大差异。</p></li><li><p>增删改查性能方面，如果执行大量的增删改操作，推荐使用 InnoDB存储引擎，它在删除操作时是对行删除，不会重建表。</p></li></ul><h4 id="myisam-和-innodb-存储引擎的对比">MyISAM 和 InnoDB存储引擎的对比</h4><ul><li><p>锁粒度方面：由于锁粒度不同，InnoDB 比 MyISAM支持更高的并发；InnoDB 的锁粒度为行锁、MyISAM的锁粒度为表锁、行锁需要对每一行进行加锁，所以锁的开销更大，但是能解决脏读和不可重复读的问题，相对来说也更容易发生死锁</p></li><li><p>可恢复性上：由于 InnoDB是有事务日志的，所以在产生由于数据库崩溃等条件后，可以根据日志文件进行恢复。而MyISAM 则没有事务日志。</p></li><li><p>查询性能上：MyISAM 要优于 InnoDB，因为 InnoDB在查询过程中，是需要维护数据缓存，而且查询过程是先定位到行所在的数据块，然后在从数据块中定位到要查找的行；而MyISAM 可以直接定位到数据所在的内存地址，可以直接找到数据。</p></li><li><p>表结构文件上：MyISAM的表结构文件包括：.frm(表结构定义),.MYI(索引),.MYD(数据)；而 InnoDB的表数据文件为:.ibd和.frm(表结构定义)；</p></li></ul><p>文章来自<a href="https://mp.weixin.qq.com/s?__biz=MzU2NDg0OTgyMA==&amp;mid=2247486267&amp;idx=1&amp;sn=b96d38b39c34d400c9985c54899e126b&amp;chksm=fc45f6c8cb327fdecabac01cb7d6fe0d75c8c212fb341cf3dc7e481b53d5fe8915160b2059e8&amp;mpshare=1&amp;scene=24&amp;srcid=0514ROWD2lIjFItWOKlBYXL7&amp;sharer_sharetime=1589434711640&amp;sharer_shareid=50e38dcd7776348278a128de8ad8d396&amp;key=8d915c155b1ceb9625a9dda450e6bf03db464ddba9fffe454cf51960477f186591696584f72a61f96c942a2e9bf698615ae2bec9e397ec4b765aab5f5874b8272c427f9aed42e3c9fc5fc7dfc1bbd1c7&amp;ascene=14&amp;uin=OTQ3NzYxMTM2&amp;devicetype=Windows+10+x64&amp;version=62090070&amp;lang=zh_CN&amp;exportkey=AzZJkfttIkfe4EOendMMvhg%3D&amp;pass_ticket=Ca7nWpSV1zN1yKOGQoK6bpsW%2BmahyJBCE2FC9DYbOLGCDSxdtOi15zeY3wsLQ%2Bdd" target="_blank" rel="noopener">Java建设者</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL数据库事务是一组原子性的SQL单元，事务内的语句要么全部执行成功，要么全部执行失败。&lt;/p&gt;
&lt;h3 id=&quot;事务的四个特性&quot;&gt;事务的四个特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原子性（Atomicity）
事务必须是原子工作单元，事务中的操作要么全部执行成功，要么全部执行失败，不能只执行部分操作。&lt;/li&gt;
&lt;li&gt;一致性
事务开始之前，数据库处于一致性的状态；事务结束后，数据库必须仍处于一致性状态。数据库一致性的定义是由用户负责的。例如，在银行转账中，用户可以定义转账前后两个账户金额之和保持不变。&lt;/li&gt;
&lt;li&gt;隔离性
通常来说一个事务在修改时但还未提交，对其他事务是不可见的。&lt;/li&gt;
&lt;li&gt;持久性
-一旦事务提交，则其所做的修改就会永久保存在数据库中。此时即使系统崩溃，修改的数据也不会丢失。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="事务" scheme="http://yoursite.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程</title>
    <link href="http://yoursite.com/2020/04/14/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/04/14/Java多线程/</id>
    <published>2020-04-14T05:18:42.000Z</published>
    <updated>2022-10-21T06:11:28.136Z</updated>
    
    <content type="html"><![CDATA[<p>Java 给多线程编程提供了内置的支持。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p><p>多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。</p><p>这里定义和线程相关的另一个术语 -进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。</p><p>多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。</p><a id="more"></a><h3 id="线程和进程的区别">线程和进程的区别</h3><p>线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。别把它和栈内存搞混，每个线程都拥有单独的栈内存来存储本地数据。</p><h3 id="创建线程有哪几种方式分别有什么优缺点">创建线程有哪几种方式？分别有什么优缺点？</h3><h4 id="创建线程">创建线程</h4><ul><li>继承Thread类，重写run()方法；</li><li>实现Runnable接口，实现run()方法，并将该实现类作为参数传入Thread构造器。</li><li>实现Callable接口，重写call()方法，并包装成FutureTask对象，再作为参数传入Thread构造器。</li></ul><h4 id="继承thread类优缺点">继承Thread类优缺点</h4><p>优点是编码简单，缺点是不能再继承其他的类，功能单一。</p><h4 id="实现runnable接口优缺点">实现Runnable接口优缺点</h4><p>优点是可以继承其他类，避免单继承的局限性；适合多个相同程序代码的线程共享一个资源，实现解耦操作，代码和线程独立。缺点是实现相对复杂。</p><h4 id="实现callable接口优缺点">实现Callable接口优缺点</h4><p>优点是相比方式二可以获取返回值，缺点是实现复杂。</p><h3 id="线程的状态">线程的状态</h3><ul><li><p>new（新建）：线程刚刚被创建，但是并未启动，还没有调用start方法。</p></li><li><p>Runnable（可运行）：线程可以在Java虚拟机中执行的状态，但是这个“执行”，不一定是真的运行，也可能是在等待CPU资源。所以在网上，有人把这个状态区分为READY和RUNNING两个，一个表示的start了，资源一到位随时可以执行，另一个表示真正的执行中。</p></li><li><p>Blocked（锁阻塞）：当一个线程试图获取一个锁对象，而该对象被其他的线程持有，则该线程进入Blocked状态；比较经典的就是synchronized关键字，这个关键字修饰的代码块或者方法，均需要获取到对应的锁，在未获取之前，其线程的状态就一直为BLOCKED，当该线程持有锁时，该线程将变成Runnable状态。如果线程长时间处于这种状态下，我们就要当心，看看是否出现死锁的问题了。</p></li><li><p>Waiting（无限等待）：一个线程在等待另一个线程执行动作是，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒。</p></li><li><p>TimedWaiting（计时等待）：同waiting状态，有几个方法有超时参数，调用他们将进入TimedWaiting状态。如：</p></li><li><p>Object.wait()</p></li><li><p>Thread.join()</p></li><li><p>Thread.sleep</p></li><li><p>LockSupport.park()</p></li></ul><p>这一状态将一直保持到超时期满或者收到唤醒通知。</p><ul><li>THRMINATED（死亡状态）：因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。</li></ul><img src="/2020/04/14/Java多线程/314e251f95cad1c8532ac9ecc4c16d0fcb3d5169.png"><h3 id="volatile关键字">volatile关键字</h3><ul><li>保证被修饰的变量对所有线程可见，在一个线程修改一个变量的值后，新值对其他线程是可以立即获取的。</li><li>禁止指令重排序，被修饰的变量不会被缓存在寄存器中或者对其他处理器不可见的地方，因此在读取<code>volatile</code>修饰的变量时总是会返回最新写入的值。</li><li>不会执行加锁操作，不会导致线程阻塞，主要适用于一个变量被多个线程共享，多个线程均可对这个变量执行赋值或读取的操作，</li><li><code>volatile</code>可以严格保证变量的单次读写操作的原子性，但不能保证像<code>i++</code>这种操作的原子性，因为<code>i++</code> 在本质上是读、写两次操作。</li></ul><h3 id="synchronized关键字">synchronized关键字</h3><ul><li>用于为Java对象、方法、代码块提供线程安全的操作，属于排它的悲观锁，也属于可重入锁。</li><li>被<code>synchronzied</code>修饰的方法和代码块在同一时刻只能有一个线程访问，其他线程只能等待当前线程释放资源后才能访问。</li><li>Java中的每个对象都有一个<code>monitor</code>监视器对象，加锁就是在竞争<code>monitor</code>，对代码块加锁是通过在前后分别加上<code>monitorenter</code>和<code>monitorexit</code>指令实现的，对方是否加锁是通过一个标记位来判断的。</li></ul><h3 id="线程池是什么为什么需要线程池">线程池是什么？为什么需要线程池？</h3><ul><li>在生产中为每一个任务创建一个线程存在一些缺陷，如果无限制地大量创建线程会消耗很多资源，影响系统稳定性和性能，产生内存溢出等问题。</li><li>线程池是管理一组同构工作线程的资源池，线程池与工作队列密切相关，工作队列中保存了所有需要等待执行的任务。工作线程的任务很简单，从工作队列获取任务，执行任务，返回线程池并等待下一次任务。</li><li>线程池通过重用现有的线程，可以在处理多个请求时分摊线程在创建和撤销过程中的开销，另一个好处是当请求到达时工作线程通常已经存在，不会出现等待线程而延迟的任务的执行，提高了响应性。通过调整线程池的大小，可以创建足够多的线程保持处理器处于忙碌状态，同时还可以防止线程过多导致内存资源耗尽。</li></ul><h3 id="创建线程池时threadpoolexecutor构造器中都有哪些参数以及各自的含义">创建线程池时，ThreadPoolExecutor构造器中都有哪些参数以及各自的含义</h3><ul><li>corePoolSize：线程池核心大小，即在没有任务执行时线程池的大小，并且只有在工作队列满了的情况下才会创建超出这个数量的线程。</li><li>maximumPoolSize：线程池最大大小，表示可同时活动的线程数量的上限。</li><li>keepAliveTime：存活时间，如果某个线程的空闲时间超过了存活时间，那么将被标记为可回收的，并且当线程池的当前大小超过基本大小时，这个线程将被终止。</li><li>unit： 存活时间的单位，可选的参数为TimeUnit枚举中的几个静态变量：NANOSECONDS、MICROSECONDS、MILLISECONDS、SECONDS。</li><li>workQueue： 线程池所使用的阻塞队列。</li><li>threadfactory：线程池使用的创建线程工厂方法，可省略，将使用默认工厂。</li><li>handler：所用的拒绝执行处理策略，可省略，将使用默认拒绝执行策略。</li></ul><h3 id="创建线程池的方法有哪些">创建线程池的方法有哪些？</h3><h4 id="可以通过executors的静态工厂方法创建线程池内部通过重载threadexecutorpool不同的构造器创建线程池">可以通过Executors的静态工厂方法创建线程池，内部通过重载ThreadExecutorPool不同的构造器创建线程池。</h4><ul><li>newFixedThreadPool，创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程池的规模将不再变化(如果某个线程由于发生了未预期的异常而结束，那么线程池会补充一个新的线程)。将线程池的核心大小和最大大小都设置为参数中指定的值，创建的线程不会超时，使用LinkedBlockingQueue。</li><li>newCachedThreadPool，创建一个可缓存的线程池，如果线程池的当前规模超过了处理器需求，那么将回收空闲的线程，而当需求增加时，可以添加新的线程，线程池的规模不存在任何限制。将线程池的最大大小设置为Integer.MAX_VALUE，而将核心大小设置为0，并将超时设为1分钟，使用SynchronousQueue，这种方法创建出的线程池可被无限扩展，并当需求降低时自动收缩。</li><li>newSingleThreadExecutor，一个单线程的Executor，创建单个工作者线程来执行任务，如果这个线程异常结束，会创建另一个线程来代替。确保依照任务在队列中的顺序来串行执行。将核心线程和最大线程数都设置为1，使用LinkedBlockingQueue。</li><li>newScheduledThreadPool，创建一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer，使用DelayedWorkQueue。</li></ul><h3 id="线程池的工作原理">线程池的工作原理</h3><ul><li>线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。即使队列里面有任务，线程池也不会马上执行它们。</li><li>通过 execute(Runnable command)方法被添加到线程池，任务就是一个Runnable类型的对象，任务的执行方法就是Runnable类型对象的run()方法。</li><li>如果workerCount小于corePoolSize，那么创建并启动一个线程执行新提交的任务。如果workerCount大于等于corePoolSize，且线程池内的阻塞队列未满，那么将这个任务放入队列。如果workerCount大于等于corePoolSize，且阻塞队列已满，若满足workerCount小于maximumPoolSize,那么还是要创建并启动一个线程执行新提交的任务。若阻塞队列已满，并且workerCount大于等于maximumPoolSize，则根据handler所指定的策略来处理此任务，默认的处理方式直接抛出异常。也就是处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。</li><li>当一个线程完成任务时，它会从队列中取下一个任务来执行。</li><li>当一个线程没有任务可执行，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于corePoolSize时，那么这个线程会被停用掉，所以线程池的所有任务完成后，它最终会收缩到corePoolSize的大小。</li></ul><h3 id="start和run方法的区别">start和run方法的区别</h3><ul><li>start方法用于启动线程，真正实现了多线程，调用了start方法后，会在后台创建一个新的线程来执行，不需要等待run方法执行完毕就可以继续执行其他代码。调用start方法时，该线程处于就绪状态，并没有开始运行。</li><li>run方法也叫做线程体，包含了要执行的线程的逻辑代码，在调用run方法并没有创建新的线程，而是直接运行run方法中的代码。</li></ul><h3 id="references">References</h3><p><a href="https://blog.csdn.net/qq_41112238/article/details/105074636" target="_blank" rel="noopener">https://blog.csdn.net/qq_41112238/article/details/105074636</a></p><p><a href="https://baijiahao.baidu.com/s?id=1655501582187466001&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1655501582187466001&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://www.jianshu.com/p/ec94ed32895f" target="_blank" rel="noopener">https://www.jianshu.com/p/ec94ed32895f</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 给多线程编程提供了内置的支持。
一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。&lt;/p&gt;
&lt;p&gt;多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。&lt;/p&gt;
&lt;p&gt;这里定义和线程相关的另一个术语 -
进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。&lt;/p&gt;
&lt;p&gt;多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="线程" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面试官邪魅一笑：MySQL千万级别大表，你要如何优化？</title>
    <link href="http://yoursite.com/2020/04/09/%E9%9D%A2%E8%AF%95%E5%AE%98%E9%82%AA%E9%AD%85%E4%B8%80%E7%AC%91%EF%BC%9AMySQL%E5%8D%83%E4%B8%87%E7%BA%A7%E5%88%AB%E5%A4%A7%E8%A1%A8%EF%BC%8C%E4%BD%A0%E8%A6%81%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/04/09/面试官邪魅一笑：MySQL千万级别大表，你要如何优化？/</id>
    <published>2020-04-09T01:13:07.000Z</published>
    <updated>2022-10-21T05:58:07.480Z</updated>
    
    <content type="html"><![CDATA[<p>当MySQL单表记录数过大时，增删改查性能都会急剧下降，可以参考以下步骤来优化：</p><a id="more"></a><h3 id="单表优化">单表优化</h3><p>除非单表数据未来会一直不断上涨，否则不要一开始就考虑拆分，拆分会带来逻辑、部署、运维的各种复杂度，一般以整型值为主的表在千万级以下，字符串为主的表在五百万以下是没有太大问题的。而事实上很多时候MySQL单表的性能依然有不少优化空间，甚至能正常支撑千万级以上的数据量：</p><h4 id="字段">字段</h4><ul><li>尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNSIGNED</li><li>VARCHAR的长度只分配真正需要的空间</li><li>使用枚举或整数代替字符串类型</li><li>尽量使用TIMESTAMP而非DATETIME，</li><li>单表不要有太多字段，建议在20以内</li><li>避免使用NULL字段，很难查询优化且占用额外索引空间</li><li>用整型来存IP</li></ul><h4 id="索引">索引</h4><ul><li>索引并不是越多越好，要根据查询有针对性的创建，考虑在WHERE和ORDERBY命令上涉及的列建立索引，可根据EXPLAIN来查看是否用了索引还是全表扫描</li><li>应尽量避免在WHERE子句中对字段进行NULL值判断，否则将导致引擎放弃使用索引而进行全表扫描</li><li>值分布很稀少的字段不适合建索引，例如"性别"这种只有两三个值的字段</li><li>字符字段只建前缀索引</li><li>字符字段最好不要做主键</li><li>不用外键，由程序保证约束</li><li>尽量不用UNIQUE，由程序保证约束</li><li>使用多列索引时主意顺序和查询条件保持一致，同时删除不必要的单列索引</li></ul><h4 id="查询sql">查询SQL</h4><ul><li>可通过开启慢查询日志来找出较慢的SQL</li><li>不做列运算：SELECT id WHERE age + 1 =10，任何对列的操作都将导致表扫描，它包括数据库教程函数、计算表达式等等，查询时要尽可能将操作移至等号右边</li><li>sql语句尽可能简单：一条sql只能在一个cpu运算；大语句拆小语句，减少锁时间；一条大sql可以堵死整个库</li><li>不用`SELECT *``</li><li>OR改写成IN：OR的效率是n级别，IN的效率是log(n)级别，in的个数建议控制在200以内</li><li>不用函数和触发器，在应用程序实现</li><li>避免%xxx式查询</li><li>少用JOIN</li><li>使用同类型进行比较，比如用'123'和'123'比，123和123比</li><li>尽量避免在WHERE子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描</li><li>对于连续数值，使用BETWEEN不用IN：SELECT id FROM t WHERE num BETWEEN1 AND 5</li><li>列表数据不要拿全表，要使用LIMIT来分页，每页数量也不要太大</li></ul><h3 id="引擎">引擎</h3><p>目前广泛使用的是MyISAM和InnoDB两种引擎：</p><h4 id="myisam">MyISAM</h4><p>MyISAM引擎是MySQL 5.1及之前版本的默认引擎，它的特点是：</p><ul><li>不支持行锁，读取时对需要读到的所有表加锁，写入时则对表加排它锁</li><li>不支持事务</li><li>不支持外键</li><li>不支持崩溃后的安全恢复</li><li>在表有读取查询的同时，支持往表中插入新纪录</li><li>支持BLOB和TEXT的前500个字符索引，支持全文索引</li><li>支持延迟更新索引，极大提升写入性能</li><li>对于不会进行修改的表，支持压缩表，极大减少磁盘空间占用</li></ul><h4 id="innodb">InnoDB</h4><ul><li>InnoDB在MySQL 5.5后成为默认索引，它的特点是：</li><li>支持行锁，采用MVCC来支持高并发</li><li>支持事务</li><li>支持外键</li><li>支持崩溃后的安全恢复</li><li>不支持全文索引</li></ul><p>总体来讲，MyISAM适合SELECT密集型的表，而InnoDB适合INSERT和UPDATE密集型的表</p><h3 id="系统调优参数">系统调优参数</h3><p>可以使用下面几个工具来做基准测试：</p><ul><li>sysbench：一个模块化，跨平台以及多线程的性能测试工具</li><li>iibench-mysql：基于 Java 的 MySQL/Percona/MariaDB索引进行插入性能测试工具</li><li>tpcc-mysql：Percona开发的TPC-C测试工具</li></ul><p>具体的调优参数内容较多，具体可参考官方文档，这里介绍一些比较重要的参数：</p><ul><li>back_log：back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。也就是说，如果MySql的连接数据达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。可以从默认的50升至500</li><li>wait_timeout：数据库连接闲置时间，闲置连接会占用内存资源。可以从默认的8小时减到半小时</li><li>max_user_connection:最大连接数，默认为0无上限，最好设一个合理上限</li><li>thread_concurrency：并发线程数，设为CPU核数的两倍</li><li>skip_name_resolve：禁止对外部连接进行DNS解析，消除DNS解析时间，但需要所有远程主机用IP访问</li><li>key_buffer_size：索引块的缓存大小，增加会提升索引处理速度，对MyISAM表性能影响最大。对于内存4G左右，可设为256M或384M，通过查询showstatus like 'key_read%'，保证key_reads /key_read_requests在0.1%以下最好</li><li>innodb_buffer_pool_size：缓存数据块和索引块，对InnoDB表性能影响最大。通过查询showstatus like'Innodb_buffer_pool_read%'，保证(Innodb_buffer_pool_read_requests –Innodb_buffer_pool_reads) /Innodb_buffer_pool_read_requests越高越好</li><li>innodb_additional_mem_pool_size：InnoDB存储引擎用来存放数据字典信息以及一些内部数据结构的内存空间大小，当数据库对象非常多的时候，适当调整该参数的大小以确保所有数据都能存放在内存中提高访问效率，当过小的时候，MySQL会记录Warning信息到数据库的错误日志中，这时就需要该调整这个参数大小</li><li>innodb_log_buffer_size：InnoDB存储引擎的事务日志所使用的缓冲区，一般来说不建议超过32MB</li><li>query_cache_size：缓存MySQL中的ResultSet，也就是一条SQL语句执行的结果集，所以仅仅只能针对select语句。当某个表的数据有任何任何变化，都会导致所有引用了该表的select语句在QueryCache中的缓存数据失效。所以，当我们的数据变化非常频繁的情况下，使用QueryCache可能会得不偿失。根据命中率(Qcache_hits/(Qcache_hits+Qcache_inserts)*100))进行调整，一般不建议太大，256MB可能已经差不多了，大型的配置型静态数据可适当调大.可以通过命令show status like 'Qcache_%'查看目前系统Querycatch使用大小</li><li>read_buffer_size：MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，可以通过增加该变量值以及内存缓冲区大小提高其性能</li><li>sort_buffer_size：MySql执行排序使用的缓冲大小。如果想要增加ORDERBY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。如果不能，可以尝试增加sort_buffer_size变量的大小</li><li>read_rnd_buffer_size：MySql的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。</li><li>record_buffer：每个进行一个顺序扫描的线程为其扫描的每张表分配这个大小的一个缓冲区。如果你做很多顺序扫描，可能想要增加该值</li><li>thread_cache_size：保存当前没有与连接关联但是准备为后面新的连接服务的线程，可以快速响应连接的线程请求而无需创建新的</li><li>table_cache：类似于thread_cache_size，但用来缓存表文件，对InnoDB效果不大，主要用于MyISAM</li></ul><h3 id="升级硬件">升级硬件</h3><p>Scaleup，这个不多说了，根据MySQL是CPU密集型还是I/O密集型，通过提升CPU和内存、使用SSD，都能显著提升MySQL性能</p><h3 id="读写分离">读写分离</h3><p>也是目前常用的优化，从库读主库写，一般不要采用双主或多主引入很多复杂性，尽量采用文中的其他方案来提高性能。同时目前很多拆分的解决方案同时也兼顾考虑了读写分离</p><h3 id="缓存">缓存</h3><p>缓存可以发生在这些层次：</p><ul><li>MySQL内部：在系统调优参数介绍了相关设置</li><li>数据访问层：比如MyBatis针对SQL语句做缓存，而Hibernate可以精确到单个记录，这里缓存的对象主要是持久化对象PersistenceObject</li><li>应用服务层：这里可以通过编程手段对缓存做到更精准的控制和更多的实现策略，这里缓存的对象是数据传输对象DataTransfer Object</li><li>Web层：针对web页面做缓存</li><li>浏览器客户端：用户端的缓存</li></ul><p>可以根据实际情况在一个层次或多个层次结合加入缓存。这里重点介绍下服务层的缓存实现，目前主要有两种方式：</p><ul><li>直写式（WriteThrough）：在数据写入数据库后，同时更新缓存，维持数据库与缓存的一致性。这也是当前大多数应用缓存框架如SpringCache的工作方式。这种实现非常简单，同步好，但效率一般。</li><li>回写式（WriteBack）：当有数据要写入数据库时，只会更新缓存，然后异步批量的将缓存数据同步到数据库上。这种实现比较复杂，需要较多的应用逻辑，同时可能会产生数据库与缓存的不同步，但效率非常高。</li></ul><h3 id="表分区">表分区</h3><p>MySQL在5.1版引入的分区是一种简单的水平拆分，用户需要在建表的时候加上分区参数，对应用是透明的无需修改代码。</p><p>对用户来说，分区表是一个独立的逻辑表，但是底层由多个物理子表组成，实现分区的代码实际上是通过对一组底层表的对象封装，但对SQL层来说是一个完全封装底层的黑盒子。MySQL实现分区的方式也意味着索引也是按照分区的子表定义，没有全局索引。</p><p>用户的SQL语句是需要针对分区表做优化，SQL条件中要带上分区条件的列，从而使查询定位到少量的分区上，否则就会扫描全部分区，可以通过EXPLAINPARTITIONS来查看某条SQL语句会落在那些分区上，从而进行SQL优化，如下图5条记录落在两个分区上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain partitions select count(1) from user_partition where id in (1,2,3,4,5);</span><br><span class="line">+----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+</span><br><span class="line">| id | select_type | table          | partitions | type  | possible_keys | key     | key_len | ref  | rows | Extra                    |</span><br><span class="line">+----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+</span><br><span class="line">|  1 | SIMPLE      | user_partition | p1,p4      | range | PRIMARY       | PRIMARY | 8       | NULL |    5 | Using where; Using index |</span><br><span class="line">+----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+</span><br><span class="line">1row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>分区的好处是：</p><ul><li>可以让单表存储更多的数据</li><li>分区表的数据更容易维护，可以通过清楚整个分区批量删除大量数据，也可以增加新的分区来支持新插入的数据。另外，还可以对一个独立分区进行优化、检查、修复等操作</li><li>部分查询能够从查询条件确定只落在少数分区上，速度会很快</li><li>分区表的数据还可以分布在不同的物理设备上，从而搞笑利用多个硬件设备</li><li>可以使用分区表赖避免某些特殊瓶颈，例如InnoDB单个索引的互斥访问、ext3文件系统的inode锁竞争</li><li>可以备份和恢复单个分区</li></ul><p>分区的限制和缺点：</p><ul><li>一个表最多只能有1024个分区</li><li>如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含进来</li><li>分区表无法使用外键约束</li><li>NULL值会使分区过滤无效</li><li>所有分区必须使用相同的存储引擎</li></ul><p>分区的类型：</p><ul><li>RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区</li><li>LIST分区：类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择</li><li>HASH分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL中有效的、产生非负整数值的任何表达式</li><li>KEY分区：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值</li></ul><p>分区适合的场景有：</p><ul><li>最适合的场景数据的时间序列性比较强，则可以按时间来分区，如下所示：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> members (</span><br><span class="line">    firstname <span class="built_in">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    lastname <span class="built_in">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">35</span>),</span><br><span class="line">    joined <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>( <span class="keyword">YEAR</span>(joined) ) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1960</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1970</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1980</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1990</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p4 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> MAXVALUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查询时加上时间范围条件效率会非常高，同时对于不需要的历史数据能很容的批量删除。</p><ul><li>如果数据有明显的热点，而且除了这部分数据，其他数据很少被访问到，那么可以将热点数据单独放在一个分区，让这个分区的数据能够有机会都缓存在内存中，查询时只访问一个很小的分区表，能够有效使用索引和缓存</li></ul><p>另外MySQL有一种早期的简单的分区实现 - 合并表（mergetable），限制较多且缺乏优化，不建议使用，应该用新的分区机制来替代</p><h3 id="垂直拆分">垂直拆分</h3><p>垂直分库是根据数据库里面的数据表的相关性进行拆分，比如：一个数据库里面既存在用户数据，又存在订单数据，那么垂直拆分可以把用户数据放到用户库、把订单数据放到订单库。垂直分表是对数据表进行垂直拆分的一种方式，常见的是把一个多字段的大表按常用字段和非常用字段进行拆分，每个表里面的数据记录数一般情况下是相同的，只是字段不一样，使用主键关联</p><p>比如原始的用户表是：</p><img src="/2020/04/09/面试官邪魅一笑：MySQL千万级别大表，你要如何优化？/640.webp"><p>垂直拆分后是：</p><img src="/2020/04/09/面试官邪魅一笑：MySQL千万级别大表，你要如何优化？/641.webp"><p>垂直拆分的优点是：</p><ul><li>可以使得行数据变小，一个数据块(Block)就能存放更多的数据，在查询时就会减少I/O次数(每次查询时读取的Block就少)</li><li>可以达到最大化利用Cache的目的，具体在垂直拆分的时候可以将不常变的字段放一起，将经常改变的放一起</li><li>数据维护简单</li></ul><p>缺点是：</p><ul><li>主键出现冗余，需要管理冗余列</li><li>会引起表连接JOIN操作（增加CPU开销）可以通过在业务服务器上进行join来减少数据库压力</li><li>依然存在单表数据量过大的问题（需要水平拆分）</li><li>事务处理复杂</li></ul><h3 id="水平拆分">水平拆分</h3><h4 id="概述">概述</h4><p>水平拆分是通过某种策略将数据分片来存储，分库内分表和分库两部分，每片数据会分散到不同的MySQL表或库，达到分布式的效果，能够支持非常大的数据量。前面的表分区本质上也是一种特殊的库内分表库内分表，仅仅是单纯的解决了单一表数据过大的问题，由于没有把表的数据分布到不同的机器上，因此对于减轻MySQL服务器的压力来说，并没有太大的作用，大家还是竞争同一个物理机上的IO、CPU、网络，这个就要通过分库来解决</p><p>前面垂直拆分的用户表如果进行水平拆分，结果是：</p><img src="/2020/04/09/面试官邪魅一笑：MySQL千万级别大表，你要如何优化？/642.webp"><p>实际情况中往往会是垂直拆分和水平拆分的结合，即将Users_A_M和Users_N_Z再拆成Users和UserExtras，这样一共四张表</p><p>水平拆分的优点是:</p><ul><li>不存在单库大数据和高并发的性能瓶颈</li><li>应用端改造较少</li><li>提高了系统的稳定性和负载能力</li></ul><p>缺点是：</p><ul><li>分片事务一致性难以解决</li><li>跨节点Join性能差，逻辑复杂</li><li>数据多次扩展难度跟维护量极大</li></ul><p>分片原则</p><ul><li>能不分就不分，参考单表优化</li><li>分片数量尽量少，分片尽量均匀分布在多个数据结点上，因为一个查询SQL跨分片越多，则总体性能越差，虽然要好于所有数据在一个分片的结果，只在必要的时候进行扩容，增加分片数量</li><li>分片规则需要慎重选择做好提前规划，分片规则的选择，需要考虑数据的增长模式，数据的访问模式，分片关联性问题，以及分片扩容问题，最近的分片策略为范围分片，枚举分片，一致性Hash分片，这几种分片都有利于扩容</li><li>尽量不要在一个事务中的SQL跨越多个分片，分布式事务一直是个不好处理的问题</li><li>查询条件尽量优化，尽量避免Select *的方式，大量数据结果集下，会消耗大量带宽和CPU资源，查询尽量避免返回大量结果集，并且尽量为频繁使用的查询语句建立索引。</li><li>通过数据冗余和表分区赖降低跨库Join的可能</li></ul><p>这里特别强调一下分片规则的选择问题，如果某个表的数据有明显的时间特征，比如订单、交易记录等，则他们通常比较合适用时间范围分片，因为具有时效性的数据，我们往往关注其近期的数据，查询条件中往往带有时间字段进行过滤，比较好的方案是，当前活跃的数据，采用跨度比较短的时间段进行分片，而历史性的数据，则采用比较长的跨度存储。</p><p>总体上来说，分片的选择是取决于最频繁的查询SQL的条件，因为不带任何Where语句的查询SQL，会遍历所有的分片，性能相对最差，因此这种SQL越多，对系统的影响越大，所以我们要尽量避免这种SQL的产生。</p><h3 id="解决方案">解决方案</h3><p>由于水平拆分牵涉的逻辑比较复杂，当前也有了不少比较成熟的解决方案。这些方案分为两大类：客户端架构和代理架构。</p><h4 id="客户端架构">客户端架构</h4><p>通过修改数据访问层，如JDBC、DataSource、MyBatis，通过配置来管理多个数据源，直连数据库，并在模块内完成数据的分片整合，一般以Jar包的方式呈现这是一个客户端架构的例子：</p><img src="/2020/04/09/面试官邪魅一笑：MySQL千万级别大表，你要如何优化？/643.webp"><p>可以看到分片的实现是和应用服务器在一起的，通过修改SpringJDBC层来实现</p><p>客户端架构的优点是：</p><ul><li>应用直连数据库，降低外围系统依赖所带来的宕机风险</li><li>集成成本低，无需额外运维的组件</li></ul><p>缺点是：</p><ul><li>限于只能在数据库访问层上做文章，扩展性一般，对于比较复杂的系统可能会力不从心</li><li>将分片逻辑的压力放在应用服务器上，造成额外风险</li></ul><h4 id="代理架构">代理架构</h4><p>通过独立的中间件来统一管理所有数据源和数据分片整合，后端数据库集群对前端应用程序透明，需要独立部署和运维代理组件</p><p>这是一个代理架构的例子：</p><img src="/2020/04/09/面试官邪魅一笑：MySQL千万级别大表，你要如何优化？/644.webp"><p>代理组件为了分流和防止单点，一般以集群形式存在，同时可能需要Zookeeper之类的服务组件来管理</p><p>代理架构的优点是：</p><ul><li>能够处理非常复杂的需求，不受数据库访问层原来实现的限制，扩展性强</li><li>对于应用服务器透明且没有增加任何额外负载</li></ul><p>缺点是：</p><ul><li>需部署和运维独立的代理中间件，成本高</li><li>应用需经过代理来连接数据库，网络上多了一跳，性能有损失且有额外风险。</li></ul><blockquote><p>文章转自 <a href="https://mp.weixin.qq.com/s?__biz=MzU4MDUyMDQyNQ==&amp;mid=2247485433&amp;idx=1&amp;sn=a59fd55f75da2c7d85485f9e14ea3146&amp;chksm=fd54d77fca235e69cc26e4ca0470a5d9645ad68749dbd7cd48114ddb7ef3746da2a66abc619a&amp;scene=0&amp;xtrack=1&amp;key=93cf6330e2c3895d7798fbfcc50115f3ce9cc2124f2a02da453a73811d7dc2191eb51b1aef02bd9db9f6af5da064a538f2f01ee8a1a55bacd47fc0d1ce9de5a25ce4d190c43fb4ed63355a692b270176&amp;ascene=14&amp;uin=OTQ3NzYxMTM2&amp;devicetype=Windows+10&amp;version=62090045&amp;lang=zh_CN&amp;exportkey=A2qPhmUra1QLj8SqVzT%2BH%2BA%3D&amp;pass_ticket=68s9wHa3wq3PpjIOxEIv9R1ixVdAGKQSLEGXMCjvnr8f1ToROQg%2FiZUTnu1yKfs%2F" target="_blank" rel="noopener">小哈学Java</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当MySQL单表记录数过大时，增删改查性能都会急剧下降，可以参考以下步骤来优化：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>vsftpd配置文件详解</title>
    <link href="http://yoursite.com/2020/04/02/vsftpd%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/04/02/vsftpd配置文件详解/</id>
    <published>2020-04-02T01:31:10.000Z</published>
    <updated>2022-10-21T06:09:06.229Z</updated>
    
    <content type="html"><![CDATA[<p>yum安装的vsftpd配置文件如下： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure></p><p>1）以“#”字符开始的行是注释行。每一行为一个选项设置，格式为“option=value”，注意“=”号两边不能留空白符。2）除了这个主配置文件外，还可以给特定用户设定个人配置文件</p><a id="more"></a><h3 id="与建立ftp链接相关的选项">1.与建立FTP链接相关的选项</h3><h4 id="监听地址与控制端口">1.1.监听地址与控制端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">listen_address=[IP]        # 提供ftp服务的主机IP，单IP主机，不需要使用，多IP主机默认监听所有IP地址。在VSFTPD使用单独(standalone)模式下有效。</span><br><span class="line">listen_port=[port]         # 提供ftp服务的控制端口号，默认值为21。此选项在standalone模式下生效。</span><br><span class="line">port_enable=YES            # 是否启用ftp主动模式，默认为YES。如果要在数据连接时取消PORT主动模式时，改为NO</span><br><span class="line">connetc_from_port_20=NO    # 以port主动模式进行数据传输时是否使用20端口，默认为NO不使用。但RHEL自带的vsftpd.conf文件中此参数设为YES。</span><br><span class="line">ftp_data_port=[port]       # 指定ftp数据传输端口值，默认为20。此参数用于主动模式。</span><br><span class="line">port_promiscuous=NO        # 取消PORT安全检查，默认为NO不取消检查。该检查确保外出的数据只能连接到客户端上。不建议打开</span><br><span class="line">pasv_enable=YES            # 允许数据传输时使用PASV被动模式。默认为YES允许被动模式</span><br><span class="line">pasv_min_port=[minport]</span><br><span class="line">pasv_max_port=[maxport]    # 设定在PASV被动模式下，建立数据传输所可以使用port范围的下界和上界，默认为0不限制。</span><br><span class="line">　　　　　　　　　　　　　　   # 把端口范围设在比较高的一段范围内，比如50000-60000，将有助于安全性的提高。</span><br><span class="line">pasv_promiscuous=NO        # 是否关闭PASV模式的安全检查，默认值为NO不关闭。该检查确保数据连接和控制连接是来自同一个IP地址。不建议打开，此选项唯一合理的用法是存在于由安全隧道方案构成的组织中。</span><br><span class="line">pasv_address=[IP]          # 此选项为一个数字IP地址，作为PASV命令的响应。默认值为none，即地址是从呼入的连接套接字(incomingconnectdsocket)中获取。</span><br></pre></td></tr></table></figure><h4 id="关于ftp服务的ascii模式">1.2.关于ftp服务的ASCII模式</h4><p>默认情况下，VSFTPD使用二进制传输数据，禁止使用ASCII传输模式。如果FTP客户端使用ascii命令，指明要使用ASCII模式，VSFTPD表面上接受了ascii命令，但在实际传输文件时，还是使用二进制方式，就会出现乱码文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ascii_upload_enable=NO     #控制是否允许使用ascii模式上传文件，默认为NO不允许。</span><br><span class="line">ascii_download_enable=NO   # 控制是否允许使用ascii模式下载文件，默认为NO不允许。</span><br></pre></td></tr></table></figure></p><h3 id="关于性能与负载控制">2.关于性能与负载控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">idle_session_timeout=60      # 设置用户会话的空闲中断时间，单位为秒，默认值为300。</span><br><span class="line">data_connection_timeout=120  # 设置空闲的数据连接的中断时间。默认值为300秒。</span><br><span class="line">accept_timeout=60            # 接受建立联机的超时设定，单位为秒。默认值为60。</span><br><span class="line">connect_timeout=60           # 响应PORT方式的数据联机的超时设定，单位为秒。默认值为60。</span><br><span class="line">　　　　　　　　　　　　　　　　　# 以上两个选项针对客户端的，将使客户端空闲1分钟后自动中断连接，并在中断1分钟后自动激活连接。</span><br><span class="line">max_clients=200              # 指明服务器总的客户并发连接数为200，默认值为0，表示不限最大连接数。此参数在使用standalone模式下有效</span><br><span class="line">max_per_ip=3                 # 指明每个IP地址的并发连接数，默认值为0不限制。该设置会影响到象网际快车这类的多进程下载软件。此参数在使用standalone模式下有效</span><br><span class="line">local_max_rate=50000         # 设置本地用户的最大传输速率限制（50kbytes/sec），以Bytes/s为单位。默认0不限制。此选项可以为指定用户单独设置</span><br><span class="line">anon_max_rate=30000          # 设定匿名用户的最大数据传输速度value，以Bytes/s为单位。默认0不限制</span><br><span class="line">pasv_min_port=50000          # 设置被动模式客户端连接时的端口范围，默认为0不限制</span><br><span class="line">pasv_max_port=60000</span><br></pre></td></tr></table></figure><h3 id="用户选项">3.用户选项</h3><p>VSFTPD的用户分为三类：匿名用户、本地用户（localuser）以及虚拟用户</p><h4 id="匿名用户">3.1.匿名用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=YES|NO      # 控制是否允许匿名用户登录，默认值为YES允许匿名用户登录。</span><br><span class="line">ftp_username=                # 匿名用户所使用的系统用户名。默认此参数在配置文件中不出现，值为ftp。</span><br><span class="line">no_anon_password=NO          # 控制匿名用户登入时是否需要密码，默认值为NO需要密码。</span><br><span class="line">deny_email_enable=NO         # 拒绝在banned_email_file指定的文件中所列出的email地址进行登录的匿名用户。默认值为NO关闭。这对于阻击某些Dos攻击有效。如果开启需要追加以下配置</span><br><span class="line">banned_email_file=/etc/banned_emails.conf    # 当匿名用户使用banned_email_file文件中所列出的e-mail进行登录时，被拒绝</span><br><span class="line">指定包含被拒绝的e-mail地址的文件，默认文件为/etc/vsftpd.banned_emails。</span><br><span class="line">anon_root=                   # 匿名用户的根目录，默认为/var/ftp/，主配置文件中默认无此项。</span><br><span class="line">anon_world_readable_only=YES # 默认值为YES只允许匿名用户下载可阅读的文件。NO允许匿名用户浏览整个服务器的文件</span><br><span class="line">anon_upload_enable=NO        # 是否允许匿名用户上传文件，默认NO不允许。</span><br></pre></td></tr></table></figure><p>除了anon_upload_enable这个参数外，匿名用户要能上传文件，还需要两个条件：</p><p>1）write_enable参数为YES;2）在文件系统上，FTP匿名用户对某个目录有写权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anon_mkdir_write_enable=NO   # 是否允许匿名用户创建新目录，默认为NO不允许，同时FTP匿名用户必需对新目录的上层目录拥有写权限。</span><br><span class="line">anon_other_write_enable=NO   # 匿名用户是否拥有除了上传和新建目录之外的其他权限，如删除、更名等。默认为NO不拥有</span><br><span class="line">chown_uploads=NO             # 是否修改匿名用户所上传文件的所有权。默认值为NO不修改。如果改为YES匿名用户所上传的文件的所有权将改为另外一个不同的用户所有</span><br><span class="line">chown_username=whoever       # 指定拥有匿名用户上传文件所有权的用户。此参数与chown_uploads联用。不推荐使用root用户。</span><br></pre></td></tr></table></figure><h4 id="本地用户">3.2.本地用户</h4><p>在使用FTP服务的用户中，除了匿名用户外，还有一类在FTP服务器所属主机上拥有账号的用户。VSFTPD中称此类用户为本地用户（localuser），等同于其他FTP服务器中的real用户。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">local_enable=YES             # 本地系统用户是否可以登陆，默认值为YES。</span><br><span class="line">local_root=                  # 定义所有本地用户的根目录。默认为空，本地用户登录到自己的宿主目录</span><br><span class="line">user_config_dir=/etc/vsftpd/user.d    # 定义用户个人配置文件所在的目录，配置文件名为用户名，配置格式与vsftpd.conf相同。默认为无不单独设置用户权限，虚拟用户也用这个</span><br></pre></td></tr></table></figure></p><h4 id="虚拟用户">3.3.虚拟用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">guest_enable=NO        　　　 # 若是启动这项功能，所有的非匿名登入者都视为guest，默认值为NO关闭。如果要使用ftp虚拟用户需要启用</span><br><span class="line">guest_username=        　　　 # 定义VSFTPD的guest用户在系统中的用户名。默认值为ftp，在使用ftp虚拟用户时建议自定义，例如ftpvuser</span><br></pre></td></tr></table></figure><h3 id="安全措施">4.安全措施</h3><h4 id="用户登录控制">4.1.用户登录控制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/vsftpd/ftpusers         # 改配置文件中的用户禁止登录FTP服务器。这个机制是在/etc/pam.d/vsftpd中默认设置的。</span><br><span class="line">pam_service_name=vsftpd      # 指定vsftpd进行PAM认证时所使用的PAM配置文件名，默认值是vsftpd，默认PAM配置文件是/etc/pam.d/vsftpd，使用ftp虚拟用户时需要更改</span><br><span class="line">userlist_enable=NO           # 是否通过userlist_file列表控制可登陆的用户，默认为NO不启用，如果启用，列表中的用户默认拒绝登录FTP服务器，在输入用户名后，不提示输入密码</span><br><span class="line">userlist_deny=YES            # 决定禁止还是允许userlist_file指定文件中的用户登录FTP服务器，默认为YES禁止文件中的用户登录，此选项在userlist_enable选项启动后才生效，如果要允许在文件中的用户登录FTP服务器需要改为NO</span><br><span class="line">userlist_file=/etc/vsftpd/user_list    # userlist_enable选项指定的用户列表的文件。默认为/etc/vsftpd/user_list。</span><br><span class="line">tcp_wrappers=YES             # 在vsftpd中使用TCP_Wrappers封装数据，默认值为YES。</span><br></pre></td></tr></table></figure><h3 id="目录访问控制">4.2.目录访问控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chroot_list_enable=NO        # 是否锁定用户在其宿主目录中，默认值为NO不锁定。具体的用户在chroot_list_file参数所指定的文件中列出。</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list    # 指定要锁定在宿主目录中的用户，默认不设置。一行一用户，通常为/etc/vsftpd/chroot_list</span><br><span class="line">chroot_local_users=NO        # 将本地用户锁定在其宿主目录中，默认值为NO不锁定。</span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">当chroot_local_users被激活时，chroot_list_enable和chroot_local_users参数的作用将发生变化，chroot_list_file所指定文件中的用户将不被锁定在自家目录。</span><br><span class="line">可能带来安全上的冲突，特别是当用户拥有上传、shell访问等权限时。</span><br><span class="line"></span><br><span class="line">passwd_chroot_enable=NO      # 当此选项需与chroot_local_user配合，chroot()容器的位置可以在每个用户的基础上指定。每个用户的容器来源于/etc/passwd中每个用户的自家目录字段。默认值为NO。</span><br></pre></td></tr></table></figure><h4 id="文件操作控制">4.3.文件操作控制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hide_ids=YES|NO              # 是否隐藏文件的所有者和组信息。默认值为NO不隐藏，如果为YES，当用户使用&quot;ls -al&quot;之类的指令时，在目录列表中所有文件的拥有者和组信息都显示为ftp</span><br><span class="line">ls_recurse_enable=YES|NO     # 是否允许使用&quot;ls-R&quot;指令，默认值为NO不允许。如果在一个大型FTP站点的根目录下使用&quot;ls-R&quot;会消耗大量系统资源。</span><br><span class="line">write_enable=YES|NO          # 是否允许使用修改文件系统的FTP的指令，默认为NO不允许，比如STOR、DELE、RNFR、RNTO、MKD、RMD、APPE以及SITE</span><br><span class="line">secure_chroot_dir=           # 安全沙箱目录，指向一个ftp用户无写权限的空目录，默认为/usr/share/empty。当vsftpd不需要访问文件系统时，这个目录将被作为一个安全的容器，用户将被限制在此目录中。</span><br><span class="line">anon_umask=                  # 匿名用户新增文件的umask数值。默认值为077。</span><br><span class="line">file_open_mode=              # 上传文件的权限，默认值为0666。与chmod所使用的数值相同。如果希望上传的文件可以执行，设此值为0777。</span><br><span class="line">local_umask=                 # 本地用户新增文件时的umask数值，默认值为077。如果希望新增的文件他人可以访问的话，修改为022</span><br></pre></td></tr></table></figure><h3 id="提示信息">5.提示信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ftpd_banner=welcome          # 此参数定义了登录欢迎语，预设值为无，可修改</span><br><span class="line">banner_file=/etc/vsftpd/banner_file    # 当用户登录时会显示此文件中的内容，通常为欢迎话语或是说明。默认值为无。</span><br><span class="line">　　　　　　　　　　　　　　　　　# 与ftpd_banner相比，banner_file是文本文件的形式，而ftpd_banner是字串格式。banner_file选项将取代ftpd_banner选项。</span><br><span class="line">dirmessage_enable=YES        # 特定目录的提示信息，默认为YES启用。当用户进入指定目录，如果该目录下存在message_file指定的文件，则显示出现此文档的内容，通常这个文档会放置欢迎话语，或是对该目录的说明。</span><br><span class="line">message_file=                # dirmessage_enable选项启用时生效，指定提示内容的文档。默认为.message，以该扩展名结尾的文件</span><br></pre></td></tr></table></figure><h3 id="日志设置">6.日志设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xferlog_enable=NO            # 是否启用一个日志文件，记录上传和下载，默认为NO不启用，该日志文件由xferlog_file选项指定</span><br><span class="line">xferlog_file=/var/log/vsftpd.log    # 记录ftp日志。默认为/var/log/vsftpd.log</span><br><span class="line">xferlog_std_format=NO        # 日志文件格式是否使用xferlog的标准格式，默认为NO不使用。默认的日志格式更为可读性，使用xferlog格式可以使用已经存在的传输统计生成器。</span><br><span class="line">log_ftp_protocol=NO          # 是否记录所有的FTP请求和响应到日志中，这个选项一般用于调试，默认为NO不记录。使用此选项时xferlog_std_format不能被激活</span><br></pre></td></tr></table></figure><h3 id="其他设置">7.其他设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setproctitle_enable=NO       # 是否在系统进程列表中显示每个会话(session)的状态，默认为NO不显示。包括挂起、下载等</span><br><span class="line">text_userdb_names=No         # 用户使用ls -al命令时，列表信息是否显示拥有者名称而不是UID，默认为NO不显示</span><br><span class="line">use_localtime=NO             # vsftpd显示目录列表时是否使用服务器本地时区的时间。默认为NO显示GMT时间，建议修改为YES。由ftp命令“MDTM”返回的时间值也受此选项影响。</span><br><span class="line">check_shell=YES              # 本地用户登录时vsftpd是否检查/etc/shells文件以寻找一个有效的用户shell。默认为YES。此选项仅对不使用PAM方式的VSFTPD生效。</span><br><span class="line">nopriv_user=nobody           # 指定一个专用的除nobody以外的用户，当VSFTPD不想要什么权限时，使用此用户身份。默认值为nobody，如果使用建议修改，因为在大多数的机器上，nobody用户被用于大量重要的事情</span><br><span class="line">pam_service_name=            # 指明vsftpd使用用PAM验证服务时的PAM配置文件名。默认值为ftp。</span><br></pre></td></tr></table></figure><blockquote><p>文章转载来自<a href="https://www.cnblogs.com/tssc/p/9592600.html" target="_blank" rel="noopener">https://www.cnblogs.com/tssc/p/9592600.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;yum安装的vsftpd配置文件如下： &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/vsftpd/vsftpd.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;1）以“#”字符开始的行是注释行。每一行为一个选项设置，格式为“option=value”，注意“=”号两边不能留空白符。
2）除了这个主配置文件外，还可以给特定用户设定个人配置文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="vsftpd" scheme="http://yoursite.com/tags/vsftpd/"/>
    
  </entry>
  
  <entry>
    <title>不就是SELECT COUNT语句吗，竟然能被面试官虐的体无完肤</title>
    <link href="http://yoursite.com/2020/03/26/%E4%B8%8D%E5%B0%B1%E6%98%AFSELECT%20COUNT%E8%AF%AD%E5%8F%A5%E5%90%97%EF%BC%8C%E7%AB%9F%E7%84%B6%E8%83%BD%E8%A2%AB%E9%9D%A2%E8%AF%95%E5%AE%98%E8%99%90%E7%9A%84%E4%BD%93%E6%97%A0%E5%AE%8C%E8%82%A4/"/>
    <id>http://yoursite.com/2020/03/26/不就是SELECT COUNT语句吗，竟然能被面试官虐的体无完肤/</id>
    <published>2020-03-26T09:38:21.000Z</published>
    <updated>2022-10-21T05:58:36.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章来自 <a href="http://www.hollischuang.com/archives/4057" target="_blank" rel="noopener">Hollis</a></p></blockquote><p>数据库查询相信很多人都不陌生，所有经常有人调侃程序员就是CRUD专员，这所谓的CRUD指的就是数据库的增删改查。</p><p>在数据库的增删改查操作中，使用最频繁的就是查询操作。而在所有查询操作中，统计数量操作更是经常被用到。</p><a id="more"></a><p>关于数据库中行数统计，无论是MySQL还是Oracle，都有一个函数可以使用，那就是COUNT。但是，就是这个常用的COUNT函数，却暗藏着很多玄机，尤其是在面试的时候，一不小心就会被虐。不信的话请尝试回答下以下问题：</p><blockquote><p>1、COUNT有几种用法？2、COUNT(字段名)和COUNT(<em>)的查询结果有什么不同？3、COUNT(1)和COUNT(</em>)之间有什么不同？4、COUNT(1)和COUNT(<em>)之间的效率哪个更高？5、为什么《阿里巴巴Java开发手册》建议使用COUNT(</em>)6、MySQL的MyISAM引擎对COUNT(<em>)做了哪些优化？7、MySQL的InnoDB引擎对COUNT(</em>)做了哪些优化？8、上面提到的MySQL对COUNT(<em>)做的优化，有一个关键的前提是什么？9、SELECT COUNT(</em>) 的时候，加不加where条件有差别吗？10、COUNT(*)、COUNT(1)和COUNT(字段名)的执行过程是怎样的？</p></blockquote><p>以上10道题，如果您可以全部准确无误的回答的话，那说明你真的很了解COUNT函数了，如果有哪些知识点是不了解的，那么本文正好可以帮你答疑解惑。</p><h3 id="认识count">认识COUNT</h3><p>关于COUNT函数，在MySQL官网中有详细介绍：</p><img src="/2020/03/26/不就是SELECT%20COUNT语句吗，竟然能被面试官虐的体无完肤/15709530990912-1.jpg"><p>简单翻译一下：</p><p>1、COUNT(expr)，返回SELECT语句检索的行中expr的值不为NULL的数量。结果是一个BIGINT值。</p><p>2、如果查询结果没有命中任何记录，则返回0</p><p>3、但是，值得注意的是，COUNT(*)的统计结果中，会包含值为NULL的行数。</p><p>即以下表记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="comment">#bla(id int,id2 int)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="comment">#bla values(null,null)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="comment">#bla values(1,null)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="comment">#bla values(null,1)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="comment">#bla values(1,null)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="comment">#bla values(null,1)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="comment">#bla values(1,null)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="comment">#bla values(null,null)</span></span><br></pre></td></tr></table></figure><p>使用语句count(*),count(id),count(id2)查询结果如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">count</span>(<span class="keyword">id</span>),<span class="keyword">count</span>(id2)</span><br><span class="line"><span class="keyword">from</span> <span class="comment">#bla</span></span><br></pre></td></tr></table></figure><p>results 7 3 2</p><p>除了COUNT(id)和COUNT(*)以外，还可以使用COUNT(常量)（如COUNT(1)）来统计行数，那么这三条SQL语句有什么区别呢？到底哪种效率更高呢？为什么《阿里巴巴Java开发手册》中强制要求不让使用COUNT(列名)或 COUNT(常量)来替代 COUNT(*)呢？</p><img src="/2020/03/26/不就是SELECT%20COUNT语句吗，竟然能被面试官虐的体无完肤/15672369567349-1.jpg"><h3 id="count列名count常量和count之间的区别">COUNT(列名)、COUNT(常量)和COUNT(*)之间的区别</h3><p>前面我们提到过COUNT(expr)用于做行数统计，统计的是expr不为NULL的行数，那么COUNT(列名)、COUNT(常量) 和 COUNT(<em>)这三种语法中，expr分别是列名、 常量 和</em>。</p><p>那么列名、 常量 和 *这三个条件中，常量是一个固定值，肯定不为NULL。*可以理解为查询整行，所以肯定也不为NULL，那么就只有列名的查询结果有可能是NULL了。</p><p>所以， COUNT(常量) 和COUNT(*)表示的是直接查询符合条件的数据库表的行数。而COUNT(列名)表示的是查询符合条件的列的值不为NULL的行数。</p><p>除了查询得到结果集有区别之外，COUNT(*)相比COUNT(常量) 和COUNT(列名)来讲，COUNT(*)是SQL92定义的标准统计行数的语法，因为他是标准语法，所以MySQL数据库对他进行过很多优化。</p><blockquote><p>SQL92，是数据库的一个ANSI/ISO标准。它定义了一种语言（SQL）以及数据库的行为（事务、隔离级别等）。</p></blockquote><h3 id="count的优化">COUNT(*)的优化</h3><p>前面提到了COUNT(*)是SQL92定义的标准统计行数的语法，所以MySQL数据库对他进行过很多优化。那么，具体都做过哪些事情呢？</p><p>这里的介绍要区分不同的执行引擎。MySQL中比较常用的执行引擎就是InnoDB和MyISAM。</p><p>MyISAM和InnoDB有很多区别，其中有一个关键的区别和我们接下来要介绍的COUNT(*)有关，那就是MyISAM不支持事务，MyISAM中的锁是表级锁；而InnoDB支持事务，并且支持行级锁。</p><p>因为MyISAM的锁是表级锁，所以同一张表上面的操作需要串行进行，所以，MyISAM做了一个简单的优化，那就是它可以把表的总行数单独记录下来，如果从一张表中使用COUNT(*)进行查询的时候，可以直接返回这个记录下来的数值就可以了，当然，前提是不能有where条件。</p><p>MyISAM之所以可以把表中的总行数记录下来供COUNT(*)查询使用，那是因为MyISAM数据库是表级锁，不会有并发的数据库行数修改，所以查询得到的行数是准确的。</p><p>但是，对于InnoDB来说，就不能做这种缓存操作了，因为InnoDB支持事务，其中大部分操作都是行级锁，所以可能表的行数可能会被并发修改，那么缓存记录下来的总行数就不准确了。</p><p>但是，InnoDB还是针对COUNT(*)语句做了些优化的。</p><p>在InnoDB中，使用COUNT(*)查询行数的时候，不可避免的要进行扫表了，那么，就可以在扫表过程中下功夫来优化效率了。</p><p>从MySQL 8.0.13开始，针对InnoDB的<code>SELECT COUNT(*) FROM tbl_name</code>语句，确实在扫表的过程中做了一些优化。前提是查询语句中不包含WHERE或GROUPBY等条件。</p><p>我们知道，COUNT(*)的目的只是为了统计总行数，所以，他根本不关心自己查到的具体值，所以，他如果能够在扫表的过程中，选择一个成本较低的索引进行的话，那就可以大大节省时间。</p><p>我们知道，InnoDB中索引分为聚簇索引（主键索引）和非聚簇索引（非主键索引），聚簇索引的叶子节点中保存的是整行记录，而非聚簇索引的叶子节点中保存的是该行记录的主键的值。</p><p>所以，相比之下，非聚簇索引要比聚簇索引小很多，所以MySQL会优先选择最小的非聚簇索引来扫表。所以，当我们建表的时候，除了主键索引以外，创建一个非主键索引还是有必要的。</p><p>至此，我们介绍完了MySQL数据库对于COUNT(*)的优化，这些优化的前提都是查询语句中不包含WHERE以及GROUPBY条件。</p><h3 id="count和count1">COUNT(*)和COUNT(1)</h3><p>介绍完了COUNT(<em>)，接下来看看COUNT(1)，对于，这二者到底有没有区别，网上的说法众说纷纭。有的说COUNT(</em>)执行时会转换成COUNT(1)，所以COUNT(1)少了转换步骤，所以更快。还有的说，因为MySQL针对COUNT(*)做了特殊优化，所以COUNT(*)更快。</p><p>那么，到底哪种说法是对的呢？看下MySQL官方文档是怎么说的：</p><blockquote><p>InnoDB handles SELECT COUNT(*) and SELECT COUNT(1) operations in thesame way. There is no performance difference.</p></blockquote><p>画重点：<code>same way , no performance difference。</code>所以，对于COUNT(1)和COUNT(*)，MySQL的优化是完全一样的，根本不存在谁比谁快！</p><p>那既然COUNT(*)和COUNT(1)一样，建议用哪个呢？</p><p>建议使用COUNT(*)！因为这个是SQL92定义的标准统计行数的语法，而且本文只是基于MySQL做了分析，关于Oracle中的这个问题，也是众说纷纭的呢。</p><h3 id="count字段">COUNT(字段)</h3><p>最后，就是我们一直还没提到的COUNT(字段)，他的查询就比较简单粗暴了，就是进行全表扫描，然后判断指定字段的值是不是为NULL，不为NULL则累加。相比COUNT(*)，COUNT(字段)多了一个步骤就是判断所查询的字段是否为NULL，所以他的性能要比COUNT(*)慢。</p><h3 id="总结">总结</h3><p>本文介绍了COUNT函数的用法，主要用于统计表行数。主要用法有COUNT(*)、COUNT(字段)和COUNT(1)。因为COUNT(*)是SQL92定义的标准统计行数的语法，所以MySQL对他进行了很多优化，MyISAM中会直接把表的总行数单独记录下来供COUNT(*)查询，而InnoDB则会在扫表的时候选择最小的索引来降低成本。当然，这些优化的前提都是没有进行where和group的条件查询。</p><p>在InnoDB中COUNT(*)和COUNT(1)实现上没有区别，而且效率一样，但是COUNT(字段)需要进行字段的非NULL判断，所以效率会低一些。</p><p>因为COUNT(*)是SQL92定义的标准统计行数的语法，并且效率高，所以请直接使用COUNT(*)查询表的行数！</p><p>参考资料：https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_count《极客时间——MySQL实战45讲》</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章来自 &lt;a href=&quot;http://www.hollischuang.com/archives/4057&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hollis&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数据库查询相信很多人都不陌生，所有经常有人调侃程序员就是CRUD专员，这所谓的CRUD指的就是数据库的增删改查。&lt;/p&gt;
&lt;p&gt;在数据库的增删改查操作中，使用最频繁的就是查询操作。而在所有查询操作中，统计数量操作更是经常被用到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
      <category term="COUNT" scheme="http://yoursite.com/tags/COUNT/"/>
    
  </entry>
  
  <entry>
    <title>Oracle索引</title>
    <link href="http://yoursite.com/2020/03/23/Oracle%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2020/03/23/Oracle索引/</id>
    <published>2020-03-23T02:41:40.000Z</published>
    <updated>2022-10-21T06:09:13.495Z</updated>
    
    <content type="html"><![CDATA[<p>索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。</p><p>在没有创建索引之前，如果要按照用户名字段username全表查询一条用户数据，就要必须在全表都搜索一遍；在username上创建索引，Oracle会对全表进行一次搜索，将每条记录的username按照顺序排序，然后构建索引条目（name和rowid），存储到索引段中。在接下来查找username等于某个值时即可直接查找到相应的地方。</p><a id="more"></a><blockquote><p>文章来自 <a href="https://www.oraclejsq.com/article/010100478.html" target="_blank" rel="noopener">FREE教程</a></p></blockquote><p>既然我们都知道建立索引有利于查询速率的提升，那是不是所有字段都可以加上索引。这是万万不行的，建立索引不仅仅要浪费空间来存储索引表，当数据量较少时，直接查询数据比经过查询索引表再定位到表数据的速度更快。索引可以提高查询的效率，但是在数据增删改时需要更新索引，因此索引对增删改时会有负面影响。所以要根据实际情况，考虑好再建立索引。</p><h3 id="何时建立索引">何时建立索引</h3><p>那何时建立索引，下面大概介绍几点，其余的得在实际应用和开发过程中，酌情考虑：</p><p>1、Oracle数据库会为表的主键和包含唯一约束的列自动创建索引，所以在建立唯一约束时，可以考虑该列是否必要建立。是否经常要作为查询条件。</p><p>2、如果某个表的数据量较大（十几二十万以上），某列经常作为where的查询条件，并且检索的出来的行数经常是小于总表的5%，那该列可以考虑建立索引。</p><p>3、对于两表连接的字段，应该考虑建立索引。如果经常在某表的一个字段进行OrderBy 则也经过进行索引。</p><p>4、不应该在小表上建立索引。上面也说过，小表之间查询的数据会比建立索引的查询速度更快，但是在某些字段，如性别：只有男、女和未知三种数据时，可以考虑位图索引，可以增加查询效率。</p><p>5、经常进行DML操作，即经常进行增删改的操作的表，创建表索引时就要权衡一下，因为建索引会导致进行DML操作时速度变慢。所以可以根据实际情况，选择某些字段建立索引，而不能盲目乱建。</p><h3 id="索引的类别">索引的类别</h3><p>适当的使用索引可以提高数据检索速度，那Oracle有哪些类型的索引呢？</p><p>1、b-tree索引：Oracle数据中最常见的索引，就是b-tree索引，createindex创建的normal就是b-tree索引，没有特殊的必须应用在哪些数据上。</p><p>2、bitmap位图索引：位图索引经常应用于列数据只有几个枚举值的情况，比如上面说到过的性别字段，或者我们经常开发中应用的代码字段。这个时候使用bitmap位图索引，查询效率将会最快。</p><p>3、函数索引：比如经常对某个字段做查询的时候经常是带函数操作的，那么此时建一个函数索引就有价值了。例如：trim（列名）或者substr(列名)等等字符串操作函数，这个时候可以建立函数索引来提升这种查询效率。</p><p>4、hash索引：hash索引可能是访问数据库中数据的最快方法，但它也有自身的缺点。创建hash索引必须使用hash集群，相当于定义了一个hash集群键，通过这个集群键来告诉oracle来存储表。因此，需要在创建hash集群的时候指定这个值。存储数据时，所有相关集群键的行都存储在一个数据块当中，所以只要定位到hash键，就能快速定位查询到数据的物理位置。</p><p>5、reverse反向索引：这个索引不经常使用到，但是在特定的情况下，是使用该索引可以达到意想不到的效果。如：某一列的值为{10000,10001,10021,10121,11000,....}，假如通过b-tree索引，大部分都密集发布在某一个叶子节点上，但是通过反向处理后的值将变成{00001,10001,12001,12101,00011,...}，很明显的发现他们的值变得比较随机，可以比较平均的分部在各个叶子节点上，而不是之前全部集中在某一个叶子节点上，这样子就可大大提高检索的效率。</p><p>6、分区索引和分区表的全局索引：这两个索引是应用在分区表上面的，前者的分区索引是对分区表内的单个分区进行数据索引，后者是对分区表的全表进行全局索引。分区表的介绍，可以后期再做单独详解，这里就不累述了。</p><h3 id="创建索引">创建索引</h3><h4 id="语法结构">语法结构：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span>[<span class="keyword">unique</span>]|[<span class="keyword">bitmap</span>] <span class="keyword">index</span> index_name <span class="comment">--UNIQUE表示唯一索引、BITMAP位图索引</span></span><br><span class="line"><span class="keyword">on</span> table_name(column1,column2...|[express])<span class="comment">--express表示函数索引</span></span><br><span class="line">[<span class="keyword">tablespace</span> tab_name] <span class="comment">--tablespace表示索引存储的表空间</span></span><br><span class="line">[pctfree n1]    <span class="comment">--索引块的空闲空间n1</span></span><br><span class="line">[<span class="keyword">storage</span>         <span class="comment">--存储块的空间</span></span><br><span class="line"> (</span><br><span class="line">    <span class="keyword">initial</span> <span class="number">64</span>K  <span class="comment">--初始64k</span></span><br><span class="line">    <span class="keyword">next</span> <span class="number">1</span>M</span><br><span class="line">    <span class="keyword">minextents</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">maxextents</span> <span class="keyword">unlimited</span></span><br><span class="line"> </span><br><span class="line">)];</span><br></pre></td></tr></table></figure><blockquote><p>Oracle要求创建索引的列不能超过32列</p></blockquote><h4 id="语法解析">语法解析：</h4><p>1、UNIQUE:指定索引列上的值必须是唯一的。称为唯一索引，BITMAP表示位图索引。</p><p>2、index_name：指定索引名。</p><p>3、tabl_name：指定要为哪个表创建索引。</p><p>4、column_name：指定要对哪个列创建索引。我们也可以对多列创建索引，这种索引称为组合索引。也可以是函数表达式，这种就是函数索引。</p><h3 id="修改索引">修改索引：</h3><h4 id="重命名索引">1、重命名索引：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">index</span> index_old <span class="keyword">rename</span> <span class="keyword">to</span> index_new;<span class="comment">--重新命名索引</span></span><br></pre></td></tr></table></figure><h4 id="合并索引重新构造索引我们索引建好后经过很长一段时间的使用索引表中存储的空间会产生一些碎片导致索引的查询效率会有所下降这个时候可以合并索引原理是按照索引规则重新分类存储一下或者也可以选择删除索引重新构造索引">2、合并索引、重新构造索引：我们索引建好后，经过很长一段时间的使用，索引表中存储的空间会产生一些碎片，导致索引的查询效率会有所下降，这个时候可以合并索引，原理是按照索引规则重新分类存储一下，或者也可以选择删除索引重新构造索引。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">index</span> index_name <span class="keyword">coalesce</span>;<span class="comment">--合并索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">index</span> index_name <span class="keyword">rebuild</span>;<span class="comment">--重新构造</span></span><br></pre></td></tr></table></figure><h3 id="删除索引">删除索引：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> index_name;</span><br></pre></td></tr></table></figure><h3 id="查看索引">查看索引：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.INDEX_NAME,<span class="comment">--索引名字</span></span><br><span class="line">       t.index_type,<span class="comment">--索引类型</span></span><br><span class="line">       t.TABLESPACE_NAME,<span class="comment">--表空间</span></span><br><span class="line">       t.status,<span class="comment">--状态</span></span><br><span class="line">       t.UNIQUENESS<span class="comment">--是否唯一索引</span></span><br><span class="line">  <span class="keyword">from</span> all_indexes T </span><br><span class="line">  <span class="keyword">where</span>  t.INDEX_NAME=<span class="string">'index_name'</span>;</span><br></pre></td></tr></table></figure><h3 id="案例分析">案例分析：</h3><h4 id="案例1学生信息表stuinfo创建的时候就对学号stuid设置了主键pk_stuinfo当我们学生信息表数据量大的情况下我们明显发现班号classno需要一个索引不仅仅是用来关联班级信息表class而且经常作为查询条件因此创建脚本如下">案例1、学生信息表（stuinfo）创建的时候就对学号（stuid）设置了主键（PK_STUINFO），当我们学生信息表数据量大的情况下，我们明显发现班号（classno）需要一个索引，不仅仅是用来关联班级信息表（class）、而且经常作为查询条件，因此创建脚本如下：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> STUDENT.IDX_STUINFO_CLASSNO <span class="keyword">on</span> STUDENT.STUINFO (CLASSNO)</span><br><span class="line">  <span class="keyword">tablespace</span> <span class="keyword">USERS</span></span><br><span class="line">  pctfree <span class="number">10</span></span><br><span class="line">  <span class="keyword">initrans</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">maxtrans</span> <span class="number">255</span></span><br><span class="line">  <span class="keyword">storage</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">initial</span> <span class="number">64</span>K</span><br><span class="line">    <span class="keyword">next</span> <span class="number">1</span>M</span><br><span class="line">    <span class="keyword">minextents</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">maxextents</span> <span class="keyword">unlimited</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h4 id="案例2对于学生信息我们经常用性别作为统计条件进行对学生信息进行统计因此我们可以在性别sex建立一个位图索引进行查询优化代码如下">案例2、对于学生信息我们经常用性别作为统计条件进行对学生信息进行统计，因此我们可以在性别（sex）建立一个位图索引进行查询优化。代码如下：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">bitmap</span> <span class="keyword">index</span> STUDENT.IDX_STUINFO_SEX <span class="keyword">on</span> STUDENT.STUINFO (SEX)</span><br><span class="line">  <span class="keyword">tablespace</span> <span class="keyword">USERS</span></span><br><span class="line">  pctfree <span class="number">10</span></span><br><span class="line">  <span class="keyword">initrans</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">maxtrans</span> <span class="number">255</span></span><br><span class="line">  <span class="keyword">storage</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">initial</span> <span class="number">64</span>K</span><br><span class="line">    <span class="keyword">next</span> <span class="number">1</span>M</span><br><span class="line">    <span class="keyword">minextents</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">maxextents</span> <span class="keyword">unlimited</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h4 id="查询一下三种索引的状态">查询一下三种索引的状态：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.INDEX_NAME,</span><br><span class="line">       t.index_type,</span><br><span class="line">       t.TABLESPACE_NAME,</span><br><span class="line">       t.status,</span><br><span class="line">       t.UNIQUENESS</span><br><span class="line">  <span class="keyword">from</span> all_indexes T</span><br><span class="line">  <span class="keyword">where</span> t.TABLE_NAME=<span class="string">'STUINFO'</span></span><br><span class="line">  <span class="keyword">AND</span> T.OWNER=<span class="string">'STUDENT'</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="/2020/03/23/Oracle索引/queryIndex.png">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。&lt;/p&gt;
&lt;p&gt;在没有创建索引之前，如果要按照用户名字段username全表查询一条用户数据，就要必须在全表都搜索一遍；在username上创建索引，Oracle会对全表进行一次搜索，将每条记录的username按照顺序排序，然后构建索引条目（name和rowid），存储到索引段中。在接下来查找username等于某个值时即可直接查找到相应的地方。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
      <category term="索引" scheme="http://yoursite.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>理解线程安全</title>
    <link href="http://yoursite.com/2019/05/28/%E7%90%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2019/05/28/理解线程安全/</id>
    <published>2019-05-28T09:04:43.000Z</published>
    <updated>2022-10-21T06:08:19.855Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自<a href="https://mp.weixin.qq.com/s/DJv7h8axGerrmCQFGSpj8Q" target="_blank" rel="noopener">编程新说李新杰</a></p></blockquote><h3 id="不是线程的安全">不是线程的安全</h3><p>面试官问：“什么是线程安全”，如果你不能很好的回答，那就请往下看吧。</p><p>论语中有句话叫“学而优则仕”，相信很多人都觉得是“学习好了可以做官”。然而，这样理解却是错的。切记望文生义。</p><p>同理，“线程安全”也不是指线程的安全，而是指内存的安全。为什么如此说呢？这和操作系统有关。</p><p>目前主流操作系统都是多任务的，即多个进程同时运行。为了保证安全，每个进程只能访问分配给自己的内存空间，而不能访问别的进程的，这是由操作系统保障的。</p><p>在每个进程的内存空间中都会有一块特殊的公共区域，通常称为堆（内存）。进程内的所有线程都可以访问到该区域，这就是造成问题的潜在原因。</p><p>假设某个线程把数据处理到一半，觉得很累，就去休息了一会，回来准备接着处理，却发现数据已经被修改了，不是自己离开时的样子了。可能被其它线程修改了。</p><p>比如把你住的小区看作一个进程，小区里的道路/绿化等就属于公共区域。你拿1万块钱往地上一扔，就回家睡觉去了。睡醒后你打算去把它捡回来，发现钱已经不见了。可能被别人拿走了。</p><p>因为公共区域人来人往，你放的东西在没有看管措施时，一定是不安全的。内存中的情况亦然如此。</p><p>所以线程安全指的是，在堆内存中的数据由于可以被任何线程访问到，在没有限制的情况下存在被意外修改的风险。</p><p>即堆内存空间在没有保护机制的情况下，对多线程来说是不安全的地方，因为你放进去的数据，可能被别的线程“破坏”。</p><p>那我们该怎么办呢？<strong><em>解决问题的过程其实就是一个取舍的过程，不同的解决方案有不同的侧重点。</em></strong></p><a id="more"></a><h3 id="私有的东西就不该让别人知道">私有的东西就不该让别人知道</h3><p>现实中很多人都会把1万块钱藏着掖着，不让无关的人知道，所以根本不可能扔到大马路上。因为这钱是你的私有物品。</p><p>在程序中也是这样的，所以操作系统会为每个线程分配属于它自己的内存空间，通常称为栈内存，其它线程无权访问。这也是由操作系统保障的。</p><p>如果一些数据只有某个线程会使用，其它线程不能操作也不需要操作，这些数据就可以放入线程的栈内存中。较为常见的就是局部变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">avgScore</span><span class="params">(<span class="keyword">double</span>[] scores)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> score : scores) &#123;</span><br><span class="line">        sum += score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = scores.length;</span><br><span class="line">    <span class="keyword">double</span> avg = sum / count;</span><br><span class="line">    <span class="keyword">return</span> avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的变量sum，count，avg都是局部变量，它们都会被分配在线程栈内存中。</p><p>假如现在A线程来执行这个方法，这些变量会在A的栈内存分配。与此同时，B线程也来执行这个方法，这些变量也会在B的栈内存中分配。</p><p>也就是说这些局部变量会在每个线程的栈内存中都分配一份。由于线程的栈内存只能自己访问，所以栈内存中的变量只属于自己，其它线程根本就不知道。</p><p>就像每个人的家只属于自己，其他人不能进来。所以你把1万块钱放到家里，其他人是不会知道的。且一般还会放到某个房间里，而不是仍在客厅的桌子上。</p><p>所以把自己的东西放到自己的私人地盘，是安全的，因为其他人无法知道。而且越隐私的地方越好。</p><h3 id="大家不要抢人人有份">大家不要抢，人人有份</h3><p>相信聪明的你已经发现，上面的解决方案是基于“位置”的。因为你放东西的“位置”只有你自己知道（或能到达），所以东西是安全的，因此这份安全是由“位置”来保障的。</p><p>在程序里就对应于方法的局部变量。局部变量之所以是安全的，就是因为定义它的“位置”是在方法里。这样一来安全是达到了，但是它的使用范围也就被限制在这个方法里了，其它方法想用也不用了啦。</p><p>现实中往往会有一个变量需要多个方法都能够使用的情况，此时定义这个变量的“位置”就不能在方法里面了，而应该在方法外面。即从（方法的）局部变量变为（类的）成员变量，其实就是“位置”发生了变化。</p><p>那么按照主流编程语言的规定，类的成员变量不能再分配在线程的栈内存中，而应该分配在公共的堆内存中。其实也就是变量在内存中的“位置”发生了变化，由一个私有区域来到了公共区域。因此潜在的安全风险也随之而来。</p><p>那怎么保证在公共区域的东西安全呢？答案就是，大家不要抢，人人有份。设想你在街头免费发放矿泉水，来了1万人，你却只有1千瓶水，结果可想而知，一拥而上，场面失守。但如果你有10万瓶水，大家一看，水多着呢，不用着急，一个个排着队来，因为肯定会领到。</p><p>东西多了，自然就不值钱了，从另一个角度来说，也就安全了。大街上的共享单车，现在都很安全，因为太多了，到处都是，都长得一样，所以连搞破坏的人都放弃了。因此要让一个东西安全，就疯狂的copy它吧。</p><p>回到程序里，要让公共区域堆内存中的数据对于每个线程都是安全的，那就每个线程都拷贝它一份，每个线程只处理自己的这一份拷贝而不去影响别的线程的，这不就安全了嘛。相信你已经猜到了，我要表达的就是ThreadLocal类了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAssistant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ThreadLocal&lt;String&gt; realName = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    ThreadLocal&lt;Double&gt; totalScore = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">determineDegree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> score = totalScore.get();</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"A"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"B"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"C"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"D"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"E"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">determineOptionalcourseScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> score = totalScore.get();</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">40</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个学生助手类有两个成员变量，realName和totalScore，都是ThreadLocal类型的。每个线程在运行时都会拷贝一份存储到自己的本地。</p><p>A线程运行的是“张三”和“90”，那么这两个数据“张三”和“90”是存储到A线程对象（Thread类的实例对象）的成员变量里去了。假设此时B线程也在运行，是“李四”和“85”，那么“李四”和“85”这两个数据是存储到了B线程对象（Thread类的实例对象）的成员变量里去了。</p><p>线程类（Thread）有一个成员变量，类似于Map类型的，专门用于存储ThreadLocal类型的数据。从逻辑从属关系来讲，这些ThreadLocal数据是属于Thread类的成员变量级别的。从所在“位置”的角度来讲，这些ThreadLocal数据是分配在公共区域的堆内存中的。</p><p>说的直白一些，就是把堆内存中的一个数据复制N份，每个线程认领1份，同时规定好，每个线程只能玩自己的那份，不准影响别人的。</p><p>需要说明的是这N份数据都还是存储在公共区域堆内存里的，经常听到的“线程本地”，是从逻辑从属关系上来讲的，这些数据和线程一一对应，仿佛成了线程自己“领地”的东西了。其实从数据所在“位置”的角度来讲，它们都位于公共的堆内存中，只不过被线程认领了而已。这一点我要特地强调一下。</p><p>其实就像大街上的共享单车。原来只有1辆，大家抢着骑，老出问题。现在从这1辆复制出N辆，每人1辆，各骑各的，问题得解。共享单车就是数据，你就是线程。骑行期间，这辆单车从逻辑上来讲是属于你的，从所在位置上来讲还是在大街上这个公共区域的，因为你发现每个小区大门口都贴着“共享单车，禁止入门”。哈哈哈哈。</p><p>共享单车是不是和ThreadLocal很像呀。<strong><em>再重申一遍，ThreadLocal就是，把一个数据复制N份，每个线程认领一份，各玩各的，互不影响。</em></strong></p><h3 id="只能看不能摸">只能看，不能摸</h3><p>放在公共区域的东西，只是存在潜在的安全风险，并不是说一定就不安全。有些东西虽然也在公共区域放着，但也是十分安全的。比如你在大街上放一个上百吨的石头雕像，就非常安全，因为大家都弄不动它。</p><p>再比如你去旅游时，经常发现一些珍贵的东西，会被用铁栅栏围起来，上面挂一个牌子，写着“只能看，不能摸”。当然可以国际化一点，“onlylook，don't touch”。这也是很安全的，因为光看几眼是不可能看坏的。</p><p>回到程序里，这种情况就属于，只能读取，不能修改。其实就是常量或只读变量，它们对于多线程是安全的，想改也改不了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAssistant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">double</span> passScore = <span class="number">60</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如把及格分数设定为60分，在前面加上一个final，这样所有线程都动不了它了。这就很安全了。</p><p>小节一下：以上三种解决方案，其实都是在“耍花招”。</p><p><strong>第一种，找个只有自己知道的地方藏起来，当然安全了。</strong></p><p><strong>第二种，每人复制1份，各玩各的，互不影响，当然也安全了。</strong></p><p><strong>第三种，更狠了，直接规定，只能读取，禁止修改，当然也安全了。</strong></p><p>是不是都在“避重就轻”呀。如果这三种方法都解决不了，该怎么办呢？Don'tworry，just continue reading。</p><h3 id="没有规则那就先入为主">没有规则，那就先入为主</h3><p>前面给出的三种方案，有点“理想化”了。现实中的情况其实是非常混乱嘈杂的，没有规则的。</p><p>比如在中午高峰期你去饭店吃饭，进门后发现只剩一个空桌子了，你心想先去点餐吧，回来就坐这里吧。当你点完餐回来后，发现已经被别人捷足先登了。</p><p>因为桌子是属于公共区域的物品，任何人都可以坐，那就只能谁先抢到谁坐。虽然你在人群中曾多看了它一眼，但它并不会记住你容颜。</p><p>解决方法就不用我说了吧，让一个人在那儿看着座位，其它人去点餐。这样当别人再来的时候，你就可以理直气壮的说，“不好意思，这个座位，我，已经占了”。</p><p>我再次相信聪明的你已经猜到了我要说的东西了，没错，就是（互斥）锁。</p><p>回到程序里，如果公共区域（堆内存）的数据，要被多个线程操作时，为了确保数据的安全（或一致）性，需要在数据旁边放一把锁，要想操作数据，先获取锁再说吧。</p><p>假设一个线程来到数据跟前一看，发现锁是空闲的，没有人持有。于是它就拿到了这把锁，然后开始操作数据，干了一会活，累了，就去休息了。</p><p>这时，又来了一个线程，发现锁被别人持有着，按照规定，它不能操作数据，因为它无法得到这把锁。当然，它可以选择等待，或放弃，转而去干别的。</p><p>第一个线程之所以敢大胆的去睡觉，就是因为它手里拿着锁呢，其它线程是不可能操作数据的。当它回来后继续把数据操作完，就可以把锁给释放了。锁再次回到空闲状态，其它线程就可以来抢这把锁了。还是谁先抢到锁谁操作数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassAssistant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> totalScore = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> Lock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">        lock.obtain();</span><br><span class="line">        totalScore += score;</span><br><span class="line">        lock.release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">        lock.obtain();</span><br><span class="line">        totalScore -= score;</span><br><span class="line">        lock.release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假定一个班级的初始分数是60分，这个班级抽出10名学生来同时参加10个不同的答题节目，每个学生答对一次为班级加上5分，答错一次减去5分。因为10个学生一起进行，所以这一定是一个并发情形。</p><p>因此加分和减分这两个方法被并发的调用，它们共同操作总分数。为了保证数据的一致性，需要在每次操作前先获取锁，操作完成后再释放锁。</p><h3 id="相信世界充满爱即使被伤害">相信世界充满爱，即使被伤害</h3><p>再回到一开始的例子，假如你往地上仍1万块钱，是不是一定会丢呢？这要看情况了，如果是在人来人往的都市，可以说肯定会丢的。如果你跑到无人区扔地上，可以说肯定不会丢。</p><p>可以看到，都是把东西无保护的放到公共区域里，结果却相差很大。这说明安全问题还和公共区域的环境状况有关系。</p><p>比如我把数据放到公共区域的堆内存中，但是始终都只会有1个线程，也就是单线程模型，那这数据肯定是安全的。</p><p>再者说，2个线程操作同一个数据和200个线程操作同一个数据，这个数据的安全概率是完全不一样的。肯定线程越多数据不安全的概率越大，线程越少数据不安全的概率越小。取个极限情况，那就是只有1个线程，那不安全概率就是0，也就是安全的。</p><p>可能你又猜到了我想表达的内容了，没错，就是CAS。可能大家觉得既然锁可以解决问题，那就用锁得了，为啥又冒出了个CAS呢？</p><p>那是因为锁的获取和释放是要花费一定代价的，如果在线程数目特别少的时候，可能根本就不会有别的线程来操作数据，此时你还要获取锁和释放锁，可以说是一种浪费。</p><p>针对这种“地广人稀”的情况，专门提出了一种方法，叫CAS（Compare AndSwap）。就是在并发很小的情况下，数据被意外修改的概率很低，但是又存在这种可能性，此时就用CAS。</p><p>假如一个线程操作数据，干了一半活，累了，想要去休息。（貌似今天的线程体质都不太好）。于是它记录下当前数据的状态（就是数据的值），回家睡觉了。</p><p>醒来后打算继续接着干活，但是又担心数据可能被修改了，于是就把睡觉前保存的数据状态拿出来和现在的数据状态比较一下，如果一样，说明自己在睡觉期间，数据没有被人动过（当然也有可能是先被改成了其它，然后又改回来了，这就是ABA问题了），那就接着继续干。如果不一样，说明数据已经被修改了，那之前做的那些操作其实都白瞎了，就干脆放弃，从头再重新开始处理一遍。</p><p>所以CAS这种方式适用于并发量不高的情况，也就是数据被意外修改的可能性较小的情况。如果并发量很高的话，你的数据一定会被修改，每次都要放弃，然后从头再来，这样反而花费的代价更大了，还不如直接加锁呢。</p><p>这里再解释下ABA问题，假如你睡觉前数据是5，醒来后数据还是5，并不能肯定数据没有被修改过。可能数据先被修改成8然后又改回到5，只是你不知道罢了。对于这个问题，其实也很好解决，再加一个版本号字段就行了，并规定只要修改数据，必须使版本号加1。</p><p>这样你睡觉前数据是5版本号是0，醒来后数据是5版本号是0，表明数据没有被修改。如果数据是5版本号是2，表明数据被改动了2次，先改为其它，然后又改回到5。</p><p>我再次相信聪明的你已经发现了，这里的CAS其实就是乐观锁，上一种方案里的获取锁和释放锁其实就是悲观锁。乐观锁持乐观态度，就是假设我的数据不会被意外修改，如果修改了，就放弃，从头再来。悲观锁持悲观态度，就是假设我的数据一定会被意外修改，那干脆直接加锁得了。</p><h3 id="作者观点">作者观点：</h3><p>前两种属于隔离法，一个是位置隔离，一个是数据隔离。</p><p>然后两种是标记法，一个是只读标记，一个是加锁标记。</p><p>最后一种是大胆法，先来怼一把试试，若不行从头再来。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转自&lt;a href=&quot;https://mp.weixin.qq.com/s/DJv7h8axGerrmCQFGSpj8Q&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;编程新说李新杰&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;不是线程的安全&quot;&gt;不是线程的安全&lt;/h3&gt;
&lt;p&gt;面试官问：“什么是线程安全”，如果你不能很好的回答，那就请往下看吧。&lt;/p&gt;
&lt;p&gt;论语中有句话叫“学而优则仕”，相信很多人都觉得是“学习好了可以做官”。然而，这样理解却是错的。切记望文生义。&lt;/p&gt;
&lt;p&gt;同理，“线程安全”也不是指线程的安全，而是指内存的安全。为什么如此说呢？这和操作系统有关。&lt;/p&gt;
&lt;p&gt;目前主流操作系统都是多任务的，即多个进程同时运行。为了保证安全，每个进程只能访问分配给自己的内存空间，而不能访问别的进程的，这是由操作系统保障的。&lt;/p&gt;
&lt;p&gt;在每个进程的内存空间中都会有一块特殊的公共区域，通常称为堆（内存）。进程内的所有线程都可以访问到该区域，这就是造成问题的潜在原因。&lt;/p&gt;
&lt;p&gt;假设某个线程把数据处理到一半，觉得很累，就去休息了一会，回来准备接着处理，却发现数据已经被修改了，不是自己离开时的样子了。可能被其它线程修改了。&lt;/p&gt;
&lt;p&gt;比如把你住的小区看作一个进程，小区里的道路/绿化等就属于公共区域。你拿1万块钱往地上一扔，就回家睡觉去了。睡醒后你打算去把它捡回来，发现钱已经不见了。可能被别人拿走了。&lt;/p&gt;
&lt;p&gt;因为公共区域人来人往，你放的东西在没有看管措施时，一定是不安全的。内存中的情况亦然如此。&lt;/p&gt;
&lt;p&gt;所以线程安全指的是，在堆内存中的数据由于可以被任何线程访问到，在没有限制的情况下存在被意外修改的风险。&lt;/p&gt;
&lt;p&gt;即堆内存空间在没有保护机制的情况下，对多线程来说是不安全的地方，因为你放进去的数据，可能被别的线程“破坏”。&lt;/p&gt;
&lt;p&gt;那我们该怎么办呢？&lt;strong&gt;&lt;em&gt;解决问题的过程其实就是一个取舍的过程，不同的解决方案有不同的侧重点。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="线程安全" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>单例模式的7种写法</title>
    <link href="http://yoursite.com/2019/04/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%847%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/28/单例模式的7种写法/</id>
    <published>2019-04-28T08:28:57.000Z</published>
    <updated>2022-10-21T06:08:38.119Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章转自公众号<a href="https://mp.weixin.qq.com/s/zXhvdF9inUDkqwCrrBt_Cg" target="_blank" rel="noopener">无敌码农 |谁要是再问你单例模式，那就抛给他这7种写法吧！</a></p></blockquote><p>单例设计模式是23种设计模式中，最基础也是最常用的设计模式之一，也是面试中关于设计模式知识点考察比较高频的问题之一。说起单例模式的写法，大多数情况下出现在我们脑海中的可能就是“饿汉式”，“懒汉式”这两种写法，但是今天小码哥今天要介绍的是单例模式的7种写法，以后面试官要是再问你单例模式，那就抛给他这七种写法吧！</p><a id="more"></a><p>接下来，我们就言归正传，来一一介绍这七种单例模式的写法吧！</p><h3 id="饿汉式">饿汉式</h3><p>饿汉式是单例模式设计中比较经典的实现方式。实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//final不允许被继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTonEhangshi</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在定义实例对象时直接初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTonEhangshi instance = <span class="keyword">new</span> SingleTonEhangshi();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造函数，不允许外部NEW</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTonEhangshi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTonEhangshi <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉式的实现关键在于instance作为类变量直接得到了初始化，如果我们主动使用SingleToEhangshi类，那么instance实例将会直接完成创建，包括其中的实例变量也都会得到初始化。</p><p>instance作为类变量，在类初始化的过程中会被收集进&lt;clinit&gt;()方法中，而该方法是可以100%地保证同步，也就是说instance在多线程的情况下不可能被初始化两次。但是由于instance被ClassLoader加载后很长一段时间才被使用的话，那就会意味着instance实例所开辟的堆内存会驻留很长的时间。</p><p>总体说来，如果一个类中的成员变量比较少，且占用的内存资源也不多，用饿汉式的方式实现单例模式也未尝不可，只是其无法进行懒加载。</p><h3 id="懒汉式">懒汉式</h3><p>所谓懒汉式就是在使用类实例的时候再去创建，也就是说用到的时候我再创建，这样就可以避免类在初始化的时候提前创建过早地占用内存空间。实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//final不允许被继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTonLhangshi</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义实例，但是不直接初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTonLhangshi instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造函数，不允许外部NEW</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTonLhangshi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTonLhangshi <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingleTonLhangshi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类变量instance=null,因此当类被初始化的时候instance并不会立刻被实例化，而是在getInstance()方法被调用时判断instance实例是否被实例化，如果没有实例化在调用私有构造方法进行实例化操作。</p><p>懒汉式写法在多线程环境下，会存在同一时间多个线程同时看到null==instance的情况，从而导致instance会被实例化多次，从而无法保证单例的唯一性。</p><h3 id="懒汉式同步方法">懒汉式＋同步方法</h3><p>懒汉式的单例实现方式可以保证实例的懒加载，但是却无法保证实例的唯一性。在多线程环境下由于instance为共享数据，当多个线程访问使用时，需要保证数据的同步性，所以如果需要保证懒汉式实例的唯一性，我们可以通过同步的方式来实现。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//final不允许被继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTonLhangshiSync</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义实例，但是不直接初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTonLhangshiSync instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造函数，不允许外部NEW</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTonLhangshiSync</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向getInstance方法加入同步控制，每次只能有一个线程能够进入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingleTonLhangshiSync <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingleTonLhangshiSync();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>采用懒汉式＋数据同步的方法既满足了懒加载又能够100%保证instance实例的唯一性。但是，synchronized关键字的排它性会导致getInstance()方法同一时刻只能被一个线程访问，性能会比较低下。</p><h3 id="double-check">Double-Check</h3><p>Double-Check是一种比较聪明的设计方式，它提供了一种高效的数据同步策略，那就是首次初始化的时候加锁，之后则允许多个线程同时进行getInstance()方法的调用来获得类的实例。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//final不允许被继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDoubleCheck</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义实例，但是不直接初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDoubleCheck instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Connection con;</span><br><span class="line">    Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造函数，不允许外部NEW</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDoubleCheck</span><span class="params">(Connection con, Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.con = con;<span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">this</span>.socket = socket;<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDoubleCheck <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当instance为null时，进入同步代码块，同时该判断避免了每次都需要进入同步代码块，可以提高效率</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">            <span class="comment">//只有一个线程能够获得SingletonDoubleCheck.class关联的monitor</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDoubleCheck<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//判断如果instance为null则创建</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonDoubleCheck();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当两个线程发现null==instance成立时，只有一个线程有资格进入同步代码块，完成对instance的初始化，随后的线程发现null==instance不成立则无须进行任何操作，以后对getInstance的访问就不会再需要进行数据同步了。</p><p>此种方式看起来是既满足了懒加载，又保证了instance实例的唯一性，并且还提供了比较高效的数据同步策略，可以允许多个线程同时对getInstance进行访问。但是这种方式在多线程的情况下，可能会引起空指针异常，这是因为如果在如上代码的构造方法中还存在初始化其他资源的情况的话，由于JVM运行时存在指令重排的情况，这些资源在实例化时顺序并无前后关系的约束，那么在这种情况下，就极有可能是instance最先被实例化，而con和socket并未完成实例化，而未完成实例化的实例在调用其方法时将会抛出空指针异常。</p><h3 id="volatiledouble-check">Volatile+Double-Check</h3><p>为了解决Double-Check指令重排导致的空指针问题，可以用volatile关键字防止这种重排序的发生。因此代码只需要稍作修改就能满足多线程下的单例、懒加载以及实例的高效性了。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//final不允许被继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDoubleCheck</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义实例，但是不直接初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonDoubleCheck instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Connection con;</span><br><span class="line">    Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造函数，不允许外部NEW</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDoubleCheck</span><span class="params">(Connection con, Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.con = con;<span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">this</span>.socket = socket;<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDoubleCheck <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当instance为null时，进入同步代码块，同时该判断避免了每次都需要进入同步代码块，可以提高效率</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">            <span class="comment">//只有一个线程能够获得SingletonDoubleCheck.class关联的monitor</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDoubleCheck<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//判断如果instance为null则创建</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonDoubleCheck();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="holder方式">Holder方式</h3><p>Holder方式完全借助了类加载的特点。代码如下： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不允许被继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonHolder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在静态内部类中持有单例类的实例，并且可直接被初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingletonHolder instance = <span class="keyword">new</span> SingletonHolder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用getInstance方法，事实上是获得Holder的instance静态属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonHolder <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在单例类中并没有instance的静态成员，而是将其放到了静态内部类Holder之中，因此单例类在初始化的过程中并不会创建SingletonHolder的实例，内部类Holder中定义了SingletonHolder的静态变量，并且直接进行了实例化，只有当Holder被主动引用的时候才会创建SingletonHolder的实例。</p><p>SingletonHolder实例的创建过程在Java程序编译时期收集至&lt;clinit&gt;()方法中，该方法又是同步方法，可以保证内存的可见性、JVM指令的顺序性和原子性。Holder方式的单例模式设计是最好的设计之一，也是目前使用比较广的设计。</p><h3 id="枚举方式">枚举方式</h3><p>枚举方式在很多开源框架中也应用得比较广泛，枚举类型不允许被继承，同样是线程安全的，并且只能被实例化一次，但是枚举类型不能够实现懒加载。用枚举类型，实现单例模式的代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonEnum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用枚举充当Holder</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> EnumHolder &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        <span class="keyword">private</span> SingletonEnum instance;</span><br><span class="line"></span><br><span class="line">        EnumHolder() &#123;</span><br><span class="line">            <span class="keyword">this</span>.instance = <span class="keyword">new</span> SingletonEnum();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> SingletonEnum <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonEnum <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EnumHolder.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是要给大家介绍的单例模式的7种写法了，虽然单例模式非常简单，但是在多线程的情况下，我们之前所设计的单例程序未必能够满足单实例、懒加载以及高性能的特点。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章转自公众号&lt;a href=&quot;https://mp.weixin.qq.com/s/zXhvdF9inUDkqwCrrBt_Cg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;无敌码农 |
谁要是再问你单例模式，那就抛给他这7种写法吧！&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单例设计模式是23种设计模式中，最基础也是最常用的设计模式之一，也是面试中关于设计模式知识点考察比较高频的问题之一。说起单例模式的写法，大多数情况下出现在我们脑海中的可能就是“饿汉式”，“懒汉式”这两种写法，但是今天小码哥今天要介绍的是单例模式的7种写法，以后面试官要是再问你单例模式，那就抛给他这七种写法吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="单例模式" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux定时任务</title>
    <link href="http://yoursite.com/2019/04/28/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/04/28/Linux定时任务/</id>
    <published>2019-04-28T08:12:54.000Z</published>
    <updated>2022-10-21T06:09:39.653Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章转自 <a href="https://www.runoob.com/w3cnote/linux-crontab-tasks.html" target="_blank" rel="noopener">菜鸟教程</a></p></blockquote><p>inux内置的cron进程能帮我们实现这些需求，cron搭配shell脚本，非常复杂的指令也没有问题。</p><h3 id="cron介绍">cron介绍</h3><p>我们经常使用的是crontab命令是crontable的简写，它是cron的配置文件，也可以叫它作业列表，我们可以在以下文件夹内找到相关配置文件。</p><ul><li>/var/spool/cron/目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名</li><li>/etc/crontab 这个文件负责调度各种管理和维护任务。</li><li>/etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。</li><li>我们还可以把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次。</li></ul><a id="more"></a><h3 id="crontab的使用">crontab的使用</h3><p>我们常用的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u username]　　　　//省略用户表表示操作当前用户的crontab</span><br><span class="line">    -e      (编辑工作表)</span><br><span class="line">    -l      (列出工作表里的命令)</span><br><span class="line">    -r      (删除工作作)</span><br></pre></td></tr></table></figure><p>我们用 <code>crontab -e</code>进入当前用户的工作表编辑，是常见的vim界面。每行是一条命令。</p><p>crontab的命令构成为 时间+动作，其时间有<strong>分、时、日、月、周</strong> 五种，操作符有</p><ul><li>* 取值范围内的所有数字</li><li>/ 每过多少个数字</li><li>- 从X到Z</li><li>，散列数字</li></ul><h3 id="实例">实例</h3><h4 id="实例1每1分钟执行一次mycommand">实例1：每1分钟执行一次myCommand</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * myCommand</span><br></pre></td></tr></table></figure><h4 id="实例2每小时的第3和第15分钟执行">实例2：每小时的第3和第15分钟执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 * * * * myCommand</span><br></pre></td></tr></table></figure><h4 id="实例3在上午8点到11点的第3和第15分钟执行">实例3：在上午8点到11点的第3和第15分钟执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * * myCommand</span><br></pre></td></tr></table></figure><h4 id="实例4每隔两天的上午8点到11点的第3和第15分钟执行">实例4：每隔两天的上午8点到11点的第3和第15分钟执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 */2  *  * myCommand</span><br></pre></td></tr></table></figure><h4 id="实例5每周一上午8点到11点的第3和第15分钟执行">实例5：每周一上午8点到11点的第3和第15分钟执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * 1 myCommand</span><br></pre></td></tr></table></figure><h4 id="实例6每晚的2130重启smb">实例6：每晚的21:30重启smb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 21 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><h4 id="实例7每月11022日的4-45重启smb">实例7：每月1、10、22日的4 :45重启smb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><h4 id="实例8每周六周日的1-10重启smb">实例8：每周六、周日的1 :10重启smb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><h4 id="实例9每天18-00至23-00之间每隔30分钟重启smb">实例9：每天18 :00至23 : 00之间每隔30分钟重启smb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,30 18-23 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><h4 id="实例10每星期六的晚上11-00-pm重启smb">实例10：每星期六的晚上11 :00 pm重启smb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 23 * * 6 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><h4 id="实例11每一小时重启smb">实例11：每一小时重启smb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* */1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><h4 id="实例12晚上11点到早上7点之间每隔一小时重启smb">实例12：晚上11点到早上7点之间，每隔一小时重启smb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 23-7/1 * * * /etc/init.d/smb restar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章转自 &lt;a href=&quot;https://www.runoob.com/w3cnote/linux-crontab-tasks.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;inux内置的cron进程能帮我们实现这些需求，cron搭配shell脚本，非常复杂的指令也没有问题。&lt;/p&gt;
&lt;h3 id=&quot;cron介绍&quot;&gt;cron介绍&lt;/h3&gt;
&lt;p&gt;我们经常使用的是crontab命令是cron
table的简写，它是cron的配置文件，也可以叫它作业列表，我们可以在以下文件夹内找到相关配置文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/var/spool/cron/
目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名&lt;/li&gt;
&lt;li&gt;/etc/crontab 这个文件负责调度各种管理和维护任务。&lt;/li&gt;
&lt;li&gt;/etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。&lt;/li&gt;
&lt;li&gt;我们还可以把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="crontab" scheme="http://yoursite.com/tags/crontab/"/>
    
      <category term="定时任务" scheme="http://yoursite.com/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Oracle的一些故障处理</title>
    <link href="http://yoursite.com/2019/04/08/Oracle%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/04/08/Oracle的一些故障处理/</id>
    <published>2019-04-08T05:17:55.000Z</published>
    <updated>2022-10-21T05:58:51.334Z</updated>
    
    <content type="html"><![CDATA[<p>这里汇总了一些在使用Oracle过程中遇到的问题及解决办法，一方面做为笔记帮助自己以后更快速处理问题，一方面分享处理供大家互相学习。</p><a id="more"></a><h3 id="sp2-0667-message-file-sp1.msb-not-found">⚪SP2-0667: Messagefile sp1<lang>.msb not found</lang></h3><p><img src="TIM20190408103118.png"></p><p>出错原因：crontab里面的脚本，通常读取的是默认的环境变量，PATH里面不包含oracle数据库的路径。</p><p>解决办法： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>把一下内容填写其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_HOME=/u01/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><blockquote><p>注意，ORACLE_HOME的路径要是你计算机中oracle真实的安装地址</p></blockquote><p>环境变量设置完成，执行 <code>source ~/.bashrc</code> 使其生效。</p><p><img src="TIM20190408122029.png"></p><h3 id="ora-12162-tnsnet-service-name-is-incorrectly-specified">⚪ORA-12162:TNS:net service name is incorrectly specified</h3><p><img src="TIM20190408121707.png"></p><p>一般出现这种错误，基本都是环境变量配置有问题，要么是没有配置正确的ORACLE_SID、ORACLE_HOME，要么是监听配置环境变量和.bash_profile环境变量配置不一致。</p><p>这里检查发现，是操作系统环境变量没有配置ORACLE_SID</p><p><img src="TIM20190408122343.png"></p><p>因此，我们配置一下 ~/.bashrc ，在其中添加ORACLE_SID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_SID=erp</span><br></pre></td></tr></table></figure><blockquote><p>注意：ORACLE_SID的值要根据自己安装oracle时设置的为准</p></blockquote><p><img src="TIM20190408122811.png"></p><p><img src="TIM20190408122556.png"></p><h3 id="ora-04021-timeout-occurred-while-waiting-to-lock-object">⚪ORA-04021:timeout occurred while waiting to lock object</h3><h4 id="情景描述">情景描述:</h4><p>Oracle中本来有个用户NC63PM_PEIXUN1，我把这个用户名更改为了NC63PM_PEIXUN2（更改方法请参考<a href="/2019/04/19/Oracle更改用户名和密码">【Oracle更改用户名和密码】</a>），之后我想按照旧的用户名再创建一个用户，但是创建的用户的SQL语句执行了十五分钟还没执行完，并报如下的错误：</p><figure><img src="TIM20190420145348.png" alt="ORA-04021: timeout occurred while waiting to lock object"><figcaption aria-hidden="true">ORA-04021: timeout occurred while waitingto lock object</figcaption></figure><h4 id="解决办法">解决办法</h4><p>查看是否被锁表了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT object_name,machine,s.sid,s.serial#</span><br><span class="line">&gt; FROM v$locked_object l,dba_objects o ,v$session s</span><br><span class="line">&gt; WHERE l.object_id=o.object_id AND l.session_id=s.sid;</span><br></pre></td></tr></table></figure><p>发现没有被锁表</p><figure><img src="TIM20190420145700.png" alt="查看锁表"><figcaption aria-hidden="true">查看锁表</figcaption></figure><p>使用 DBA_DDL_LOCKS视图获得DDL锁定信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT * FROM dba_ddl_locks;</span><br></pre></td></tr></table></figure><p>发现有两条关于 NC63PM_PEIXUN1 用户的锁定信息</p><p><img src="TIM20190420150236.png"></p><p>通过 session_id 找到对应的锁表信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT sid,serial#,status FROM v$session a WHERE a.sid in (829,392);</span><br></pre></td></tr></table></figure><p><img src="TIM20190420150455.png"></p><p>注：因我是kill掉这两条信息后才截的图，所以 STATUS 才为 KILLED的。</p><p>kill这两条锁表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ALTER SYSTEM KILL SESSION &apos;392, 5049&apos;;</span><br><span class="line">&gt; ALTER SYSTEM KILL SESSION &apos;829, 25287&apos;;</span><br></pre></td></tr></table></figure><p>再次执行创建用户的脚本就能顺利执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里汇总了一些在使用Oracle过程中遇到的问题及解决办法，一方面做为笔记帮助自己以后更快速处理问题，一方面分享处理供大家互相学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="oracle" scheme="http://yoursite.com/tags/oracle/"/>
    
  </entry>
  
</feed>
